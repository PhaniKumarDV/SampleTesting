diff -urN net-snmp-5.4.4-org/agent/mibgroup/kwnmib.c net-snmp-5.4.4-mod/agent/mibgroup/kwnmib.c
--- net-snmp-5.4.4-org/agent/mibgroup/kwnmib.c	1970-01-01 05:30:00.000000000 +0530
+++ net-snmp-5.4.4-mod/agent/mibgroup/kwnmib.c	2018-09-25 19:21:16.598092128 +0530
@@ -0,0 +1,2167 @@
+/****************************************************************************
+*                                                                           *
+*  File Name:           kwnmib.c                                           *
+*  Used By:                                                                 *
+*                                                                           *
+*  Operating System:                                                        *
+*  Purpose:                                                                 *
+*                                                                           *
+*  Comments:                                                                *
+*                                                                           *
+*  Author:              Srilatha                                            *
+*                                                                           *
+*  Creation Date:       09/02/03                                            *
+*                                                                           *
+*   Ver    Date   Inits Modification                                        *
+*  ----- -------- ----- ------------                                        *
+****************************************************************************/
+/****************************************************************************
+*                               Includes                                    *
+****************************************************************************/
+#include <sys/ioctl.h>
+#include <sys/types.h>
+#include <sys/file.h>
+#include <sys/socket.h>
+#include <netinet/in.h>
+#include <linux/netlink.h>
+#include <linux/rtnetlink.h>
+#include <linux/types.h>
+#include <linux/if.h>
+#include <linux/wireless.h>
+#include <linux/if_arp.h>
+#include <string.h>
+
+#include <linux/ioctl.h>
+
+#include <net-snmp/net-snmp-config.h>
+#include <net-snmp/net-snmp-includes.h>
+#include <net-snmp/agent/net-snmp-agent-includes.h>
+#include "kwnmib.h"
+#include <endian.h>
+#if __BYTE_ORDER == __BIG_ENDIAN
+#define _BYTE_ORDER _BIG_ENDIAN
+#elif __BYTE_ORDER == __LITTLE_ENDIAN
+#define _BYTE_ORDER _LITTLE_ENDIAN
+#else
+#error "__BYTE_ORDER undefined"
+#endif
+#define EXTERNAL_USE_ONLY
+
+#ifndef __packed
+#define __packed    __attribute__((__packed__))
+#endif
+#include "_ieee80211.h"
+#include "ieee80211_defines.h"
+#include "ieee80211.h"
+#include "ieee80211_ioctl.h"
+
+kwn_snmp_array kwn_wireless_radio_mode = { 4,{ { 1, "ap" }, { 2, "sta" }, { 3, "ap" }, { 4, "sta" } } };
+kwn_snmp_array kwn_wireless_country = { 4, { { 1, "5011" }, { 2, "5016" }, { 3, "5017" }, { 4, "643" } } };
+kwn_snmp_array kwn_wireless_opmode = { 5, { { 1, "11g" }, { 2, "11ng" }, { 3, "11a" }, { 4, "11na" }, { 5, "11ac" } } };
+kwn_snmp_array kwn_wireless_bandwidth = { 3, { { 1, "HT20" }, { 2, "HT40+" }, { 3, "HT80" } } };
+kwn_snmp_array kwn_wireless_encryption = { 2, { { 1, "none" }, { 2, "psk2+ccmp" } } };
+kwn_snmp_array kwn_wireless_macfilter = { 3, { { 1, "disable" }, { 2, "allow" }, { 3, "deny" } } };
+kwn_snmp_array kwn_network_ip_type = { 2, { { 1, "static" }, { 2, "dhcp" } } };
+kwn_snmp_array kwn_network_vlan_ethertype = { 4, { { 1, "0x0081" }, { 2, "0xa888" }, { 3, "0x0091" }, { 4, "0x0092" } } };
+
+/****************************************************************************
+ *                                Global Variables                          *
+ ****************************************************************************/
+
+  kwn_wireless_stats kwn_assoc_list;
+  char               res_str[ KWN_UCI_CMD_OUTPUT_LEN_MAX ];
+  long               res_val;
+  uint32_t           res_ip;
+  WriteMethod        wlanwriteMethod;
+  WriteMethod        nwkwriteMethod;
+  WriteMethod        radiuswriteMethod;
+  WriteMethod        vlanwriteMethod;
+  WriteMethod        ethernetwriteMethod;
+  WriteMethod        dhcpwriteMethod;
+  WriteMethod        systemwriteMethod;
+  WriteMethod        AssocwriteMethod;
+
+/****************************************************************************
+*   kwnmib_variables_oid:                                                  *
+*       this is the top level oid that we want to register under.  This     *
+*       is essentially a prefix, with the suffix appearing in the           *
+*       variable below.                                                     *
+****************************************************************************/
+oid kwnmib_variables_oid[] = { 1, 3, 6, 1, 4, 1, KWN_PRIVATE_MIB_OID };
+
+/****************************************************************************
+*   variable kwnmib_variables:                                            *
+*     this variable defines function callbacks and type return information  *
+*     for the kwnmib mib section                                           *
+****************************************************************************/
+struct variable7 kwnmib_variables[] = {
+/*  magic number        , variable type , ro/rw , callback fn  , L, oidsuffix */
+  /* Wireless MIBS */
+  { 1   , ASN_INTEGER    , RWRITE, var_WlanTable, 6, { KWN_SMAC, KWN_CONFIGURATION, KWN_WIRELESS, KWN_WLANTABLE, KWN_WLANENTRY, KWN_WLAN_INDEX } },
+  { 2   , ASN_INTEGER    , RWRITE, var_WlanTable, 6, { KWN_SMAC, KWN_CONFIGURATION, KWN_WIRELESS, KWN_WLANTABLE, KWN_WLANENTRY, KWN_WLAN_RADIOMODE } },
+  { 3   , ASN_OCTET_STR  , RWRITE, var_WlanTable, 6, { KWN_SMAC, KWN_CONFIGURATION, KWN_WIRELESS, KWN_WLANTABLE, KWN_WLANENTRY, KWN_WLAN_SSID } },
+  { 4   , ASN_INTEGER    , RWRITE, var_WlanTable, 6, { KWN_SMAC, KWN_CONFIGURATION, KWN_WIRELESS, KWN_WLANTABLE, KWN_WLANENTRY, KWN_WLAN_COUNTRY } },
+  { 5   , ASN_INTEGER    , RWRITE, var_WlanTable, 6, { KWN_SMAC, KWN_CONFIGURATION, KWN_WIRELESS, KWN_WLANTABLE, KWN_WLANENTRY, KWN_WLAN_OPMODE } },
+  { 6   , ASN_OCTET_STR  , RWRITE, var_WlanTable, 6, { KWN_SMAC, KWN_CONFIGURATION, KWN_WIRELESS, KWN_WLANTABLE, KWN_WLANENTRY, KWN_WLAN_SUPPORTED_BANDWIDTHS } },
+  { 7   , ASN_INTEGER    , RWRITE, var_WlanTable, 6, { KWN_SMAC, KWN_CONFIGURATION, KWN_WIRELESS, KWN_WLANTABLE, KWN_WLANENTRY, KWN_WLAN_BANDWIDTH } },
+  { 8   , ASN_OCTET_STR  , RWRITE, var_WlanTable, 6, { KWN_SMAC, KWN_CONFIGURATION, KWN_WIRELESS, KWN_WLANTABLE, KWN_WLANENTRY, KWN_WLAN_SUPPORTED_CHANNELS } },
+  { 9   , ASN_INTEGER    , RWRITE, var_WlanTable, 6, { KWN_SMAC, KWN_CONFIGURATION, KWN_WIRELESS, KWN_WLANTABLE, KWN_WLANENTRY, KWN_WLAN_CHANNEL } },
+  { 10  , ASN_OCTET_STR  , RWRITE, var_WlanTable, 6, { KWN_SMAC, KWN_CONFIGURATION, KWN_WIRELESS, KWN_WLANTABLE, KWN_WLANENTRY, KWN_WLAN_SUPPORTED_RATES } },
+  { 11  , ASN_INTEGER    , RWRITE, var_WlanTable, 6, { KWN_SMAC, KWN_CONFIGURATION, KWN_WIRELESS, KWN_WLANTABLE, KWN_WLANENTRY, KWN_WLAN_RATE } },
+  { 12  , ASN_INTEGER    , RWRITE, var_WlanTable, 6, { KWN_SMAC, KWN_CONFIGURATION, KWN_WIRELESS, KWN_WLANTABLE, KWN_WLANENTRY, KWN_WLAN_TXPOWER } },
+  { 13  , ASN_INTEGER    , RWRITE, var_WlanTable, 6, { KWN_SMAC, KWN_CONFIGURATION, KWN_WIRELESS, KWN_WLANTABLE, KWN_WLANENTRY, KWN_WLAN_AMSDU } },
+  { 14  , ASN_INTEGER    , RWRITE, var_WlanTable, 6, { KWN_SMAC, KWN_CONFIGURATION, KWN_WIRELESS, KWN_WLANTABLE, KWN_WLANENTRY, KWN_WLAN_UPLINK_LIMIT } },
+  { 15  , ASN_INTEGER    , RWRITE, var_WlanTable, 6, { KWN_SMAC, KWN_CONFIGURATION, KWN_WIRELESS, KWN_WLANTABLE, KWN_WLANENTRY, KWN_WLAN_DOWNLINK_LIMIT } },
+  { 16  , ASN_INTEGER    , RWRITE, var_WlanTable, 6, { KWN_SMAC, KWN_CONFIGURATION, KWN_WIRELESS, KWN_WLANTABLE, KWN_WLANENTRY, KWN_WLAN_HIDE_ESSID } },
+  { 17  , ASN_OCTET_STR  , RWRITE, var_WlanTable, 6, { KWN_SMAC, KWN_CONFIGURATION, KWN_WIRELESS, KWN_WLANTABLE, KWN_WLANENTRY, KWN_WLAN_CUSTOMER_NAME } },
+  { 18  , ASN_INTEGER    , RWRITE, var_WlanTable, 6, { KWN_SMAC, KWN_CONFIGURATION, KWN_WIRELESS, KWN_WLANTABLE, KWN_WLANENTRY, KWN_WLAN_LINKID } },
+  { 19  , ASN_INTEGER    , RWRITE, var_WlanTable, 6, { KWN_SMAC, KWN_CONFIGURATION, KWN_WIRELESS, KWN_WLANTABLE, KWN_WLANENTRY, KWN_WLAN_SECURITY_ENC } },
+  { 20  , ASN_OCTET_STR  , RWRITE, var_WlanTable, 6, { KWN_SMAC, KWN_CONFIGURATION, KWN_WIRELESS, KWN_WLANTABLE, KWN_WLANENTRY, KWN_WLAN_SECURITY_KEY } },
+  { 21  , ASN_INTEGER    , RWRITE, var_WlanTable, 6, { KWN_SMAC, KWN_CONFIGURATION, KWN_WIRELESS, KWN_WLANTABLE, KWN_WLANENTRY, KWN_WLAN_MACFILTER } },
+  { 22  , ASN_OCTET_STR  , RWRITE, var_WlanTable, 6, { KWN_SMAC, KWN_CONFIGURATION, KWN_WIRELESS, KWN_WLANTABLE, KWN_WLANENTRY, KWN_WLAN_MACLIST } },
+  { 23  , ASN_INTEGER    , RWRITE, var_WlanTable, 6, { KWN_SMAC, KWN_CONFIGURATION, KWN_WIRELESS, KWN_WLANTABLE, KWN_WLANENTRY, KWN_WLAN_DISTANCE } },
+  { 24  , ASN_INTEGER    , RWRITE, var_WlanTable, 6, { KWN_SMAC, KWN_CONFIGURATION, KWN_WIRELESS, KWN_WLANTABLE, KWN_WLANENTRY, KWN_WLAN_SHORTGI } },
+  { 25  , ASN_INTEGER    , RWRITE, var_WlanTable, 6, { KWN_SMAC, KWN_CONFIGURATION, KWN_WIRELESS, KWN_WLANTABLE, KWN_WLANENTRY, KWN_WLAN_TXCHAINMASK } },
+  { 26  , ASN_INTEGER    , RWRITE, var_WlanTable, 6, { KWN_SMAC, KWN_CONFIGURATION, KWN_WIRELESS, KWN_WLANTABLE, KWN_WLANENTRY, KWN_WLAN_RXCHAINMASK } },
+  /* Network MIBS */
+  { 27  , ASN_INTEGER    , RWRITE, var_NwkIPTable, 4, { KWN_SMAC, KWN_CONFIGURATION, KWN_NETWORK, KWN_NWK_ADRSTYPE } },
+  { 28  , ASN_IPADDRESS  , RWRITE, var_NwkIPTable, 4, { KWN_SMAC, KWN_CONFIGURATION, KWN_NETWORK, KWN_NWK_IP } },
+  { 29  , ASN_IPADDRESS  , RWRITE, var_NwkIPTable, 4, { KWN_SMAC, KWN_CONFIGURATION, KWN_NETWORK, KWN_NWK_MASK } },
+  { 30  , ASN_IPADDRESS  , RWRITE, var_NwkIPTable, 4, { KWN_SMAC, KWN_CONFIGURATION, KWN_NETWORK, KWN_NWK_GATEWAY } },
+  { 31  , ASN_IPADDRESS  , RWRITE, var_NwkIPTable, 4, { KWN_SMAC, KWN_CONFIGURATION, KWN_NETWORK, KWN_NWK_DNS } },
+  /* RADIUS MIBS */
+  { 32  , ASN_INTEGER    , RWRITE, var_RadiusTable, 4, { KWN_SMAC, KWN_CONFIGURATION, KWN_RADIUS, KWN_RADIUS_STATUS } },
+  { 33  , ASN_IPADDRESS  , RWRITE, var_RadiusTable, 4, { KWN_SMAC, KWN_CONFIGURATION, KWN_RADIUS, KWN_RADIUS_PRISERVER } },
+  { 34  , ASN_INTEGER    , RWRITE, var_RadiusTable, 4, { KWN_SMAC, KWN_CONFIGURATION, KWN_RADIUS, KWN_RADIUS_PRIPORT } },
+  { 35  , ASN_OCTET_STR  , RWRITE, var_RadiusTable, 4, { KWN_SMAC, KWN_CONFIGURATION, KWN_RADIUS, KWN_RADIUS_PRISECRET } },
+  { 36  , ASN_IPADDRESS  , RWRITE, var_RadiusTable, 4, { KWN_SMAC, KWN_CONFIGURATION, KWN_RADIUS, KWN_RADIUS_SECSERVER } },
+  { 37  , ASN_INTEGER    , RWRITE, var_RadiusTable, 4, { KWN_SMAC, KWN_CONFIGURATION, KWN_RADIUS, KWN_RADIUS_SECPORT } },
+  { 38  , ASN_OCTET_STR  , RWRITE, var_RadiusTable, 4, { KWN_SMAC, KWN_CONFIGURATION, KWN_RADIUS, KWN_RADIUS_SECSECRET } },
+  { 39  , ASN_INTEGER    , RWRITE, var_RadiusTable, 4, { KWN_SMAC, KWN_CONFIGURATION, KWN_RADIUS, KWN_RADIUS_REAUTHTIME } },
+  { 40  , ASN_INTEGER    , RWRITE, var_RadiusTable, 4, { KWN_SMAC, KWN_CONFIGURATION, KWN_RADIUS, KWN_RADIUS_RETRYTIME } },
+  { 41  , ASN_INTEGER    , RWRITE, var_RadiusTable, 4, { KWN_SMAC, KWN_CONFIGURATION, KWN_RADIUS, KWN_RADIUS_RETRYCOUNT } },
+  { 42  , ASN_INTEGER    , RWRITE, var_RadiusTable, 4, { KWN_SMAC, KWN_CONFIGURATION, KWN_RADIUS, KWN_RADIUS_RETRYCOUNTPERIOD } },
+  /* VLAN MIBS */
+  { 43  , ASN_INTEGER    , RWRITE, var_VlanTable, 4, { KWN_SMAC, KWN_CONFIGURATION, KWN_VLAN, KWN_VLAN_STATUS } },
+  { 44  , ASN_INTEGER    , RWRITE, var_VlanTable, 4, { KWN_SMAC, KWN_CONFIGURATION, KWN_VLAN, KWN_VLAN_MODE } },
+  { 45  , ASN_INTEGER    , RWRITE, var_VlanTable, 4, { KWN_SMAC, KWN_CONFIGURATION, KWN_VLAN, KWN_VLAN_MGMTID } },
+  { 46  , ASN_INTEGER    , RWRITE, var_VlanTable, 4, { KWN_SMAC, KWN_CONFIGURATION, KWN_VLAN, KWN_VLAN_ACCESSID } },
+  { 47  , ASN_INTEGER    , RWRITE, var_VlanTable, 4, { KWN_SMAC, KWN_CONFIGURATION, KWN_VLAN, KWN_VLAN_TRUNKOPTION } },
+  { 48  , ASN_OCTET_STR  , RWRITE, var_VlanTable, 4, { KWN_SMAC, KWN_CONFIGURATION, KWN_VLAN, KWN_VLAN_TRUNKID } },
+  { 49  , ASN_INTEGER    , RWRITE, var_VlanTable, 4, { KWN_SMAC, KWN_CONFIGURATION, KWN_VLAN, KWN_VLAN_SVLAN } },
+  { 50  , ASN_INTEGER    , RWRITE, var_VlanTable, 4, { KWN_SMAC, KWN_CONFIGURATION, KWN_VLAN, KWN_VLAN_SVLAN_ETHERTYPE } },
+  /* Ethernet MIBS */
+  { 51  , ASN_INTEGER    , RWRITE, var_EthernetTable, 4, { KWN_SMAC, KWN_CONFIGURATION, KWN_ETHERNET, KWN_ETHERNET_MODE } },
+  { 52  , ASN_INTEGER    , RWRITE, var_EthernetTable, 4, { KWN_SMAC, KWN_CONFIGURATION, KWN_ETHERNET, KWN_ETHERNET_INACTIVITY } },
+  /* DHCP MIBS */
+  { 53  , ASN_INTEGER    , RWRITE, var_DhcpTable, 4, { KWN_SMAC, KWN_CONFIGURATION, KWN_DHCP, KWN_DHCP_SERVER } },
+  { 54  , ASN_INTEGER    , RWRITE, var_DhcpTable, 4, { KWN_SMAC, KWN_CONFIGURATION, KWN_DHCP, KWN_DHCP_START } },
+  { 55  , ASN_INTEGER    , RWRITE, var_DhcpTable, 4, { KWN_SMAC, KWN_CONFIGURATION, KWN_DHCP, KWN_DHCP_LIMIT } },
+  { 56  , ASN_INTEGER    , RWRITE, var_DhcpTable, 4, { KWN_SMAC, KWN_CONFIGURATION, KWN_DHCP, KWN_DHCP_LEASE_TIME } },
+  /* Management MIBS */
+  { 57  , ASN_INTEGER    , RWRITE, var_SystemTable, 4, { KWN_SMAC, KWN_MANAGEMENT, KWN_SYSTEM, KWN_SYS_APPLY } },
+  { 58  , ASN_INTEGER    , RWRITE, var_SystemTable, 4, { KWN_SMAC, KWN_MANAGEMENT, KWN_SYSTEM, KWN_SYS_RESET } },
+  { 59  , ASN_INTEGER    , RWRITE, var_SystemTable, 4, { KWN_SMAC, KWN_MANAGEMENT, KWN_SYSTEM, KWN_SYS_REBOOT } },
+  { 60  , ASN_INTEGER    , RWRITE, var_SystemTable, 4, { KWN_SMAC, KWN_MANAGEMENT, KWN_SYSTEM, KWN_SYS_DYNAMIC_APPLY } },
+  /* Wireless Stats MIBS */
+  { 61  , ASN_INTEGER    , RONLY , var_WirelessStatsTable, 5, { KWN_SMAC, KWN_MONITOR, KWN_WIRELESSSTATS, KWN_WIRELESSSTATSENTRY, KWN_WIRELESSSTATS_RADIO_INDEX } },
+  { 62  , ASN_INTEGER    , RONLY , var_WirelessStatsTable, 5, { KWN_SMAC, KWN_MONITOR, KWN_WIRELESSSTATS, KWN_WIRELESSSTATSENTRY, KWN_WIRELESSSTATS_REMOTEPARTNERS } },
+  /* Ethernet Stats MIBS */
+  { 63  , ASN_OCTET_STR  , RONLY , var_EthernetStatsTable, 4, { KWN_SMAC, KWN_MONITOR, KWN_ETHERNETSTATS, KWN_ETHSTATS_STATUS } },
+  { 64  , ASN_OCTET_STR  , RONLY , var_EthernetStatsTable, 4, { KWN_SMAC, KWN_MONITOR, KWN_ETHERNETSTATS, KWN_ETHSTATS_SPEED } },
+  { 65  , ASN_OCTET_STR  , RONLY , var_EthernetStatsTable, 4, { KWN_SMAC, KWN_MONITOR, KWN_ETHERNETSTATS, KWN_ETHSTATS_DUPLEX } },
+  /* Assoc MIBS */
+  { 66  , ASN_INTEGER    , RONLY , var_AssocTable, 5, { KWN_SMAC, KWN_MONITOR, KWN_ASSOCLIST, KWN_ASSOCENTRY, KWN_ASSOC_RADIO_INDEX } },
+  { 67  , ASN_INTEGER    , RONLY , var_AssocTable, 5, { KWN_SMAC, KWN_MONITOR, KWN_ASSOCLIST, KWN_ASSOCENTRY, KWN_ASSOC_SEC_INDEX } },
+  { 68  , ASN_OCTET_STR  , RONLY , var_AssocTable, 5, { KWN_SMAC, KWN_MONITOR, KWN_ASSOCLIST, KWN_ASSOCENTRY, KWN_ASSOC_MAC } },
+  { 69  , ASN_IPADDRESS  , RONLY , var_AssocTable, 5, { KWN_SMAC, KWN_MONITOR, KWN_ASSOCLIST, KWN_ASSOCENTRY, KWN_ASSOC_IP } },
+  { 70  , ASN_OCTET_STR  , RONLY , var_AssocTable, 5, { KWN_SMAC, KWN_MONITOR, KWN_ASSOCLIST, KWN_ASSOCENTRY, KWN_ASSOC_REMOTE_LAT } },
+  { 71  , ASN_OCTET_STR  , RONLY , var_AssocTable, 5, { KWN_SMAC, KWN_MONITOR, KWN_ASSOCLIST, KWN_ASSOCENTRY, KWN_ASSOC_REMOTE_LONG } },
+  { 72  , ASN_OCTET_STR  , RONLY , var_AssocTable, 5, { KWN_SMAC, KWN_MONITOR, KWN_ASSOCLIST, KWN_ASSOCENTRY, KWN_ASSOC_LOCAL_LAT } },
+  { 73  , ASN_OCTET_STR  , RONLY , var_AssocTable, 5, { KWN_SMAC, KWN_MONITOR, KWN_ASSOCLIST, KWN_ASSOCENTRY, KWN_ASSOC_LOCAL_LONG } },
+  { 74  , ASN_INTEGER    , RONLY , var_AssocTable, 5, { KWN_SMAC, KWN_MONITOR, KWN_ASSOCLIST, KWN_ASSOCENTRY, KWN_ASSOC_RX_RATE } },
+  { 75  , ASN_INTEGER    , RONLY , var_AssocTable, 5, { KWN_SMAC, KWN_MONITOR, KWN_ASSOCLIST, KWN_ASSOCENTRY, KWN_ASSOC_TX_RATE } },
+  { 76  , ASN_INTEGER    , RONLY , var_AssocTable, 5, { KWN_SMAC, KWN_MONITOR, KWN_ASSOCLIST, KWN_ASSOCENTRY, KWN_ASSOC_RX_TPUT } },
+  { 77  , ASN_INTEGER    , RONLY , var_AssocTable, 5, { KWN_SMAC, KWN_MONITOR, KWN_ASSOCLIST, KWN_ASSOCENTRY, KWN_ASSOC_TX_TPUT } },
+  { 78  , ASN_INTEGER    , RONLY , var_AssocTable, 5, { KWN_SMAC, KWN_MONITOR, KWN_ASSOCLIST, KWN_ASSOCENTRY, KWN_ASSOC_LOCAL_SNR_A1 } },
+  { 79  , ASN_INTEGER    , RONLY , var_AssocTable, 5, { KWN_SMAC, KWN_MONITOR, KWN_ASSOCLIST, KWN_ASSOCENTRY, KWN_ASSOC_LOCAL_SNR_A2 } },
+  { 80  , ASN_INTEGER    , RONLY , var_AssocTable, 5, { KWN_SMAC, KWN_MONITOR, KWN_ASSOCLIST, KWN_ASSOCENTRY, KWN_ASSOC_REMOTE_SNR_A1 } },
+  { 81  , ASN_INTEGER    , RONLY , var_AssocTable, 5, { KWN_SMAC, KWN_MONITOR, KWN_ASSOCLIST, KWN_ASSOCENTRY, KWN_ASSOC_REMOTE_SNR_A2 } },
+  { 82  , ASN_INTEGER    , RONLY , var_AssocTable, 5, { KWN_SMAC, KWN_MONITOR, KWN_ASSOCLIST, KWN_ASSOCENTRY, KWN_ASSOC_LOCAL_PHY_ERR } },
+  { 83  , ASN_INTEGER    , RONLY , var_AssocTable, 5, { KWN_SMAC, KWN_MONITOR, KWN_ASSOCLIST, KWN_ASSOCENTRY, KWN_ASSOC_REMOTE_PHY_ERR } },
+  { 84  , ASN_INTEGER    , RONLY , var_AssocTable, 5, { KWN_SMAC, KWN_MONITOR, KWN_ASSOCLIST, KWN_ASSOCENTRY, KWN_ASSOC_LOCAL_MPDU_ERR } },
+  { 85  , ASN_INTEGER    , RONLY , var_AssocTable, 5, { KWN_SMAC, KWN_MONITOR, KWN_ASSOCLIST, KWN_ASSOCENTRY, KWN_ASSOC_REMOTE_MPDU_ERR } },
+  { 86  , ASN_INTEGER    , RONLY , var_AssocTable, 5, { KWN_SMAC, KWN_MONITOR, KWN_ASSOCLIST, KWN_ASSOCENTRY, KWN_ASSOC_LOCAL_RETRIES } },
+  { 87  , ASN_INTEGER    , RONLY , var_AssocTable, 5, { KWN_SMAC, KWN_MONITOR, KWN_ASSOCLIST, KWN_ASSOCENTRY, KWN_ASSOC_REMOTE_RETRIES } },
+  { 88  , ASN_INTEGER    , RWRITE, var_AssocTable, 5, { KWN_SMAC, KWN_MONITOR, KWN_ASSOCLIST, KWN_ASSOCENTRY, KWN_ASSOC_LINKTEST_DUR } },
+  { 89  , ASN_INTEGER    , RWRITE, var_AssocTable, 5, { KWN_SMAC, KWN_MONITOR, KWN_ASSOCLIST, KWN_ASSOCENTRY, KWN_ASSOC_LINKTEST_DIR } },
+  { 90  , ASN_INTEGER    , RWRITE, var_AssocTable, 5, { KWN_SMAC, KWN_MONITOR, KWN_ASSOCLIST, KWN_ASSOCENTRY, KWN_ASSOC_LINKTEST_START_STOP } },
+  { 91  , ASN_INTEGER    , RONLY , var_AssocTable, 5, { KWN_SMAC, KWN_MONITOR, KWN_ASSOCLIST, KWN_ASSOCENTRY, KWN_ASSOC_LOCAL_NOISE_FLOOR } },
+  { 92  , ASN_INTEGER    , RONLY , var_AssocTable, 5, { KWN_SMAC, KWN_MONITOR, KWN_ASSOCLIST, KWN_ASSOCENTRY, KWN_ASSOC_REMOTE_NOISE_FLOOR } },
+};
+
+/****************************************************************************
+*                                                                           *
+*         init_kwnmib() - perform any required initialization              *
+*                                                                           *
+****************************************************************************/
+void init_kwnmib ( void ) 
+{
+  /* register ourselves with the agent to handle our mib tree */
+  REGISTER_MIB( "kwnmib", kwnmib_variables, variable7, kwnmib_variables_oid );
+}
+
+void shutdown_kwnmib ( void ) 
+{
+}
+
+/****************************************************************************
+*                                                                           *
+*         kwn_sys_cmd() - Get System command output                         *
+*                                                                           *
+****************************************************************************/
+void kwn_sys_cmd( const char* cmd, uint8_t* buf )
+{
+    FILE *fp = NULL;
+    uint8_t  a[ KWN_UCI_CMD_OUTPUT_LEN_MAX ] = { 0 };
+    uint8_t  *token;
+    uint16_t len;
+
+    fp = popen( cmd, "r" );
+    if( fp == NULL )
+        return;
+    memset( a, '\0', sizeof(a) );
+    while( fgets( a, sizeof(a), fp ) != NULL )
+    {
+        /*printf("%s",a);*/
+    }
+    pclose( fp );
+
+    if( a[0] == '\0' ) {
+        memcpy( buf, "-NA-", sizeof( buf ) );
+        return;
+    }
+    token = strtok( a, "\n" );
+    len = strlen( token );
+    memcpy( buf, token, len );
+    return;
+}
+
+/****************************************************************************
+*                                                                           *
+*         kwn_conv_str_to_ip() - Convert string to Uint32 IP                *
+*                                                                           *
+****************************************************************************/
+void kwn_conv_str_to_ip( int8_t* conv_ip, uint32_t* ip_addr )
+{
+    uint32_t val;
+    int8_t  *tok, *ptr;
+
+    tok = strtok( conv_ip, "." );
+
+    while( tok != NULL )
+    {
+        val = strtoul( tok, &ptr, 0 );
+        *ip_addr = ( *ip_addr << 8 ) + val;
+        tok = strtok( NULL, "." );
+    }
+    return;
+}
+
+/****************************************************************************
+*                                                                           *
+*         kwn_conv_uint32_to_ip() - Convert Uint32 IP to string             *
+*                                                                           *
+****************************************************************************/
+void kwn_conv_uint32_to_ip( u_char *val, size_t len, uint8_t* byte )
+{
+    char cmd[ 100 ];
+    char buf1[ 30 ];
+    char buf2[ 30 ];
+    u_long ip;
+
+    memcpy( buf1, val, (len > 8) ? 8 : len );
+    ip = *( (u_long *) buf1 );
+    buf2[ 0 ] = ( ip & 0xFF );
+    buf2[ 1 ] = ( (ip >>  8) & 0xFF );
+    buf2[ 2 ] = ( (ip >> 16) & 0xFF );
+    buf2[ 3 ] = ( (ip >> 24) & 0xFF );
+
+    sprintf( byte, "%d.%d.%d.%d", buf2[0], buf2[1], buf2[2], buf2[3] );
+    return;
+}
+
+/****************************************************************************
+*                                                                           *
+*         kwn_get_value() - Get value based on type                         *
+*                                                                           *
+****************************************************************************/
+void kwn_get_value( int type, char* cmd, size_t *var_len, kwn_snmp_array *arr )
+{
+    uint32_t resaddr = 0;
+    char *ptr;
+    int i;
+
+    kwn_sys_cmd( cmd, &res_str[0] );
+    switch( type )
+    {
+        case KWN_TYPE_INTEGER32:
+            if( !memcmp( res_str, "-NA-", 4 ) )
+                res_val = -1;
+            else
+            {
+                if( arr != NULL )
+                {
+                    for ( i = 0; i < (arr->len); i++ )
+                    {
+                         if( strncmp( res_str, arr->array[i].str, strlen(res_str) ) == 0 )
+                         {
+                            res_val = arr->array[i].value;
+                            break;
+                         }
+                    }
+                }
+                else
+                {
+                    res_val = strtol( res_str, &ptr, KWN_UCI_STR_ENUM_LEN );
+                }
+            }
+            *var_len = sizeof ( long );
+            break;
+        case KWN_TYPE_DISPLAY_STRING:
+            res_str[ strlen( res_str ) ] = '\0';
+            *var_len = strlen( res_str );
+            break;
+        case KWN_TYPE_IP_ADDRESS:
+            res_str[ strlen( res_str ) ] = '\0';
+            kwn_conv_str_to_ip( &res_str[0], &resaddr );
+            res_ip = ntohl( resaddr );
+            *var_len = sizeof( in_addr_t );
+            break;
+    }
+}
+
+/****************************************************************************
+*                                                                           *
+*          kwn_enum_str_set() - Set value based on input value              *
+*                                                                           *
+****************************************************************************/
+void kwn_enum_str_set ( long long_val, kwn_snmp_array *arr, char *string_val )
+{
+    int i;
+    int len;
+
+    for ( i = 0 ; i < (arr->len); i++ )
+    {
+        if ( long_val == arr->array[i].value )
+        {
+            memcpy ( string_val, arr->array[i].str, strlen( arr->array[i].str ) );
+            len = strlen( arr->array[i].str );
+            string_val [ len ] = '\0';
+            break;
+        }
+    }
+}
+
+int get_supported_channels( int ind, kwn_freqlist *kwn_freq_list )
+{
+    int sk_fd = -1, i, num_chans = 0;
+    struct iwreq iwr;
+    struct ieee80211req_chaninfo *chans;
+    unsigned char buf[ 24 * 1024 ]  = { 0 };
+    char cmd[100], ifname[5];
+    int len;
+
+    sprintf( ifname, "ath%d", ind );
+    (void) strncpy( iwr.ifr_name, ifname, sizeof( iwr.ifr_name ) );
+
+    iwr.u.data.pointer = ( void *) buf;
+    iwr.u.data.length = sizeof( struct ieee80211req_chaninfo );
+    iwr.u.data.flags = 0;
+    sk_fd = socket( AF_INET, SOCK_DGRAM, 0 );
+
+    len = sizeof( struct ieee80211req_chaninfo );
+    if( sk_fd < 0 ) {
+        sk_fd = -1;
+        return -1;
+    }
+    if( ioctl( sk_fd, IEEE80211_IOCTL_GETCHANINFO, &iwr ) < 0 )
+    {
+        close( sk_fd );
+        return -1;
+    }
+    else
+    {
+        chans = ( struct ieee80211req_chaninfo * ) buf;
+        for( i = 0; i < chans->ic_nchans; i++ )
+        {
+            kwn_freq_list->array[i].mhz = chans->ic_chans[i].ic_freq;
+            kwn_freq_list->array[i].channel = chans->ic_chans[i].ic_ieee;
+            num_chans++;
+        }
+    }
+    kwn_freq_list->num_chans = num_chans; 
+    close( sk_fd );
+    return 0;
+}
+
+int get_assoclist( int radio_ind )
+{
+    int sk_fd = -1;
+    struct ieee80211req_sta_info *si;
+    struct iwreq iwr;
+    unsigned char *cp = NULL;
+    unsigned char buf[ 24 * 1024 ]  = { 0 };
+    int len = 0;
+    int num = 0;
+    char cmd[100];
+
+    kwn_assoc_list.no_of_links = 0;
+    (void) memset( &iwr, 0, sizeof( iwr ) );
+    (void) strncpy( iwr.ifr_name, "ath1", sizeof( iwr.ifr_name ) );
+    iwr.u.data.pointer = ( void * ) buf;
+    iwr.u.data.length = sizeof( buf );
+    sk_fd = socket( AF_INET, SOCK_DGRAM, 0 );
+
+    if( sk_fd < 0 ) {
+        sk_fd = -1;
+        return -1;
+    }
+    if( ioctl( sk_fd, IEEE80211_IOCTL_STA_INFO, &iwr ) < 0 ) {
+        close( sk_fd );
+        return -1;
+    }
+    len = iwr.u.data.length;
+    if( len < sizeof( struct ieee80211req_sta_info ) ) {
+        close( sk_fd );
+        return -1;
+    }
+    cp = buf;
+    do {
+        si = ( struct ieee80211req_sta_info * ) cp;
+        memcpy( kwn_assoc_list.sta[num].mac, &si->isi_macaddr, KWN_MAC_ADDR_LEN );
+        memcpy( kwn_assoc_list.sta[num].l_latitude, si->isi_l_latitude + 5, sizeof( kwn_assoc_list.sta[num].l_latitude ) );
+        memcpy( kwn_assoc_list.sta[num].l_longitude, si->isi_l_longitude + 5, sizeof( kwn_assoc_list.sta[num].l_longitude ) );
+        memcpy( kwn_assoc_list.sta[num].r_latitude, si->isi_r_latitude + 5, sizeof( kwn_assoc_list.sta[num].r_latitude ) );
+        memcpy( kwn_assoc_list.sta[num].r_longitude, si->isi_r_longitude + 5, sizeof( kwn_assoc_list.sta[num].r_longitude ) );
+        kwn_assoc_list.sta[ num ].tx_rate = ( long ) ( si->isi_txratekbps / 1000 );
+        kwn_assoc_list.sta[ num ].rx_rate = ( long ) ( si->isi_rxratekbps / 1000 );
+        kwn_assoc_list.sta[ num ].tx_tput = ( long ) ( si->isi_tx_tput / 1000 );
+        kwn_assoc_list.sta[ num ].rx_tput = ( long ) ( si->isi_rx_tput / 1000 );
+        kwn_assoc_list.sta[ num ].local_snr_a1 = ( long ) si->isi_local_snr_a1;
+        kwn_assoc_list.sta[ num ].remote_snr_a1 = ( long ) si->isi_remote_snr_a1;
+        kwn_assoc_list.sta[ num ].local_snr_a2 = ( long ) si->isi_local_snr_a2;
+        kwn_assoc_list.sta[ num ].remote_snr_a2 = ( long ) si->isi_remote_snr_a2;
+        kwn_assoc_list.sta[ num ].local_phy_err = ( long ) si->isi_local_phy_err;
+        kwn_assoc_list.sta[ num ].remote_phy_err = ( long ) si->isi_remote_phy_err;
+        kwn_assoc_list.sta[ num ].local_mpdu_err = ( long ) si->isi_local_mpdu_err;
+        kwn_assoc_list.sta[ num ].remote_mpdu_err = ( long ) si->isi_remote_mpdu_err;
+        kwn_assoc_list.sta[ num ].local_retries = ( long ) si->isi_local_retries;
+        kwn_assoc_list.sta[ num ].remote_retries = ( long ) si->isi_remote_retries;
+        kwn_assoc_list.sta[ num ].ip = si->isi_ip_addr;
+        kwn_assoc_list.sta[ num ].local_noise_floor = (long) si->isi_l_noise_floor;
+        kwn_assoc_list.sta[ num ].remote_noise_floor = (long) si->isi_r_noise_floor;
+        num ++;
+        cp += si->isi_len, len -= si->isi_len;
+    } while( len >= sizeof( struct ieee80211req_sta_info ) );
+    close( sk_fd );
+    kwn_assoc_list.no_of_links = num;
+}
+
+/****************************************************************************
+ *                                                                          *
+ *   var_WlanTable() -                                                      *
+ *                                                                          *
+ ****************************************************************************/
+unsigned char *
+var_WlanTable ( struct variable *vp, 
+        oid     *name, 
+        size_t  *length, 
+        int     exact, 
+        size_t  *var_len, 
+        WriteMethod **write_method )
+{
+    char cmd[100];
+    int ind;
+    char *ptr;
+
+    ind = ( int ) name[ 13 ];
+    if( ind < 1 || ind > 2 )
+        return NULL;
+    ind = ind - 1;
+
+    memset( res_str, '\0', sizeof( res_str ) );
+    res_val = 0;
+    res_ip = 0;
+    *length = vp->namelen + 1;
+    *write_method = wlanwriteMethod;
+
+    switch ( (char) name[12] ) {
+        case KWN_WLAN_INDEX:
+            {
+                *write_method = NULL;
+                res_val = ind + 1;
+                *var_len = sizeof ( long );
+                return ( u_char * ) &res_val;
+            }
+        case KWN_WLAN_RADIOMODE:
+            {
+                sprintf( cmd, "uci get wireless.@wifi-iface[%d].mode", ind );
+                kwn_get_value( KWN_TYPE_INTEGER32, &cmd[0], var_len, &kwn_wireless_radio_mode );
+                if( ind == 0 )
+                {
+                    if( res_val == 1 )
+                        res_val = 3;
+                    else
+                        res_val = 4;
+                }
+                return ( u_char * ) &res_val;
+            }
+        case KWN_WLAN_SSID:
+            {
+                sprintf( cmd, "uci get wireless.@wifi-iface[%d].ssid", ind );
+                kwn_get_value( KWN_TYPE_DISPLAY_STRING, &cmd[0], var_len, NULL );
+                return ( u_char * ) res_str;
+            }
+        case KWN_WLAN_COUNTRY:
+            {
+                sprintf( cmd, "uci get wireless.wifi%d.country", ind );
+                kwn_get_value( KWN_TYPE_INTEGER32, &cmd[0], var_len, &kwn_wireless_country );
+                return ( u_char * ) &res_val;
+            }
+        case KWN_WLAN_OPMODE:
+            {
+                sprintf( cmd, "uci get wireless.wifi%d.hwmode", ind );
+                kwn_get_value( KWN_TYPE_INTEGER32, &cmd[0], var_len, &kwn_wireless_opmode );
+                return ( u_char * ) &res_val;
+            }
+        case KWN_WLAN_SUPPORTED_BANDWIDTHS:
+            {
+                long coun;
+
+                sprintf( cmd, "uci get wireless.wifi%d.country", ind );
+                kwn_get_value( KWN_TYPE_INTEGER32, &cmd[0], var_len, &kwn_wireless_country );
+                coun = res_val;
+                memset( res_str, '\0', sizeof( res_str ) );
+                res_val = 0;
+                sprintf( cmd, "uci get wireless.wifi%d.hwmode", ind );
+                kwn_get_value( KWN_TYPE_INTEGER32, &cmd[0], var_len, &kwn_wireless_opmode );
+                if( ind == 0 )
+                {
+                    /* 2.4GHz Radio */
+                    if( res_val == kwn_wireless_opmode.array[0].value )
+                        sprintf( res_str, "20" );
+                    else if( res_val == kwn_wireless_opmode.array[1].value )
+                        sprintf( res_str, "20,40" );
+                    else
+                        sprintf( res_str, "-NA-" );
+                }
+                else
+                {
+                    /* 5GHz Radio */
+                    if( res_val == kwn_wireless_opmode.array[2].value )
+                        sprintf( res_str, "20" );
+                    else if( res_val == kwn_wireless_opmode.array[3].value )
+                        sprintf( res_str, "20,40" );
+                    else if( res_val == kwn_wireless_opmode.array[4].value )
+                        if( coun != kwn_wireless_country.array[0].value )
+                            sprintf( res_str, "20,40" );
+                        else
+                            sprintf( res_str, "20,40,80" );
+                    else
+                        sprintf( res_str, "-NA-" );
+                }
+                *var_len = strlen( res_str );
+                return ( u_char * ) res_str;
+            }
+        case KWN_WLAN_BANDWIDTH:
+            {
+                sprintf( cmd, "uci get wireless.wifi%d.htmode", ind );
+                kwn_get_value( KWN_TYPE_INTEGER32, &cmd[0], var_len, &kwn_wireless_bandwidth );
+                return ( u_char * ) &res_val;
+            }
+        case KWN_WLAN_SUPPORTED_CHANNELS:
+            {
+                kwn_freqlist kwn_freq_list;
+                int i = 0, commaneed = 0;
+                char temp[30];
+               
+                get_supported_channels( ind, &kwn_freq_list );
+                for( i = 0; i < kwn_freq_list.num_chans; i++ )
+                {
+                    if( commaneed )
+                        strcat( res_str, "," );
+                    sprintf( temp, "%d (%d MHz)", kwn_freq_list.array[i].channel, kwn_freq_list.array[i].mhz );
+                    strcat( res_str, temp );
+                    commaneed = 1;
+                }
+                *var_len = strlen( res_str );
+                return ( u_char * ) res_str;
+            }
+        case KWN_WLAN_CHANNEL:
+            {
+                sprintf( cmd, "uci get wireless.wifi%d.channel", ind );
+                kwn_get_value( KWN_TYPE_DISPLAY_STRING, &cmd[0], var_len, NULL );
+                if ( strncmp( res_str, "auto", 4 ) == 0 )
+                {
+                    res_val = -1;
+                }
+                else
+                {
+                    res_val = strtol( res_str, &ptr, KWN_UCI_STR_ENUM_LEN );
+                }
+                *var_len = sizeof( long );
+                return ( u_char * ) &res_val;
+            }
+        case KWN_WLAN_SUPPORTED_RATES:
+            {
+                long hwmode, bw;
+
+                /* Not supported 2.4 Radio */
+                if( ind == 0 ) {
+                    sprintf( res_str, "-NA-" );
+                    *var_len = strlen( res_str );
+                    return ( u_char * ) res_str;
+                }
+                sprintf( cmd, "uci get wireless.wifi%d.hwmode", ind );
+                kwn_get_value( KWN_TYPE_INTEGER32, &cmd[0], var_len, &kwn_wireless_opmode );
+                hwmode = res_val;
+                memset( res_str, '\0', sizeof( res_str ) );
+                res_val = 0;
+                sprintf( cmd, "uci get wireless.wifi%d.htmode", ind );
+                kwn_get_value( KWN_TYPE_INTEGER32, &cmd[0], var_len, &kwn_wireless_bandwidth );
+                bw = res_val;
+                /* 11A */
+                if( hwmode == kwn_wireless_opmode.array[2].value ) {
+                    /* 20MHz */
+                    if( bw == kwn_wireless_bandwidth.array[0].value ) {
+                        sprintf( res_str, "0-6Mbps,1-9Mbps,2-12Mbps,3-18Mbps,4-24Mbps,5-36Mbps,6-48Mbps,7-54Mbps" );
+                    }
+                    else if( bw == kwn_wireless_bandwidth.array[1].value ) {
+                        sprintf( res_str, "0-12Mbps,1-18Mbps,2-24Mbps,3-36Mbps,4-48Mbps,5-72Mbps,6-96Mbps,7-108Mbps" );
+                    }
+                    else {
+                        sprintf( res_str, "-NA-" );
+                    }
+                }
+                /* 11NA */
+                else if( hwmode == kwn_wireless_opmode.array[3].value ) {
+                    if( bw == kwn_wireless_bandwidth.array[0].value ) {
+                        sprintf( res_str, "0-7.2Mbps,1-14.4Mbps,2-21.7Mbps,3-28.9Mbps,4-43.3Mbps,5-57.8Mbps,6-65Mbps,7-72.2Mbps,8-14.4Mbps,9-28.9Mbps,10-43.3Mbps,11-57.8Mbps,12-86.7Mbps,13-115.6Mbps,14-130Mbps,15-144.4Mbps" );
+                    }
+                    else if( bw == kwn_wireless_opmode.array[1].value ) {
+                        sprintf( res_str, "0-15Mbps,1-30Mbps,2-45Mbps,3-60Mbps,4-90Mbps,5-120Mbps,6-135Mbps,7-150Mbps,8-30Mbps,9-60Mbps,10-90Mbps,11-120Mbps,12-180Mbps,13-240Mbps,14-270Mbps,15-300Mbps" );
+                    }
+                    else {
+                        sprintf( res_str, "-NA-" );
+                    }
+                }
+                else if( hwmode == kwn_wireless_opmode.array[4].value ) {
+                    if( bw == kwn_wireless_bandwidth.array[0].value ) {
+                        sprintf( res_str, "0-7.2Mbps,1-14.4Mbps,2-21.7Mbps,3-28.9Mbps,4-43.3Mbps,5-57.8Mbps,6-65Mbps,7-72.2Mbps,8-86.7Mbps,9-14.4Mbps,10-28.9Mbps,11-43.3Mbps,12-57.8Mbps,13-86.7Mbps,14-115.6Mbps,15-130Mbps,16-144.4Mbps,17-173.3Mbps" );
+                    }
+                    else if( bw == kwn_wireless_opmode.array[1].value ) {
+                        sprintf( res_str, "0-15Mbps,1-30Mbps,2-45Mbps,3-60Mbps,4-90Mbps,5-120Mbps,6-135Mbps,7-150Mbps,8-180Mbps,9-200Mbps,10-30Mbps,11-60Mbps,12-90Mbps,13-120Mbps,14-180Mbps,15-240Mbps,16-270Mbps,17-300Mbps,18-360Mbps,19-400Mbps" );
+                    }
+                    else if( bw == kwn_wireless_opmode.array[2].value ) {
+                        sprintf( res_str, "0-32.5Mbps,1-65Mbps,2-97.5Mbps,3-130Mbps,4-195Mbps,5-260Mbps,6-292.5Mbps,7-325Mbps,8-390Mbps,9-433.3Mbps,10-65Mbps,11-130Mbps,12-195Mbps,13-260Mbps,14-390Mbps,15-520Mbps,16-585Mbps,17-650Mbps,18-780Mbps,19-866.7Mbps" );
+                    }
+                    else {
+                        sprintf( res_str, "-NA-" );
+                    }
+                }
+                *var_len = strlen( res_str );
+                return ( u_char * ) res_str;
+            }
+        case KWN_WLAN_RATE:
+            {
+                sprintf( cmd, "uci get wireless.wifi%d.rate", ind );
+                kwn_get_value( KWN_TYPE_DISPLAY_STRING, &cmd[0], var_len, NULL );
+                if( strncmp( res_str, "auto", 4 ) == 0 )
+                {
+                    res_val = -1;
+                }
+                else
+                {
+                    res_val = strtol( res_str, &ptr, KWN_UCI_STR_ENUM_LEN );
+                }
+                *var_len = sizeof( long );
+                return ( u_char * ) &res_val;
+            }
+        case KWN_WLAN_TXPOWER:
+            {
+                sprintf( cmd, "uci get wireless.wifi%d.TXPowLim5G", ind );
+                kwn_get_value( KWN_TYPE_INTEGER32, &cmd[0], var_len, NULL );
+                return ( u_char * ) &res_val;
+            }
+        case KWN_WLAN_AMSDU:
+            {
+                sprintf( cmd, "uci get wireless.@wifi-iface[%d].kwnamsdu", ind );
+                kwn_get_value( KWN_TYPE_INTEGER32, &cmd[0], var_len, NULL );
+                return ( u_char * ) &res_val;
+            }
+        case KWN_WLAN_UPLINK_LIMIT:
+            {
+                sprintf( cmd, "uci get wireless.@wifi-iface[%d].ullmt", ind );
+                kwn_get_value( KWN_TYPE_INTEGER32, &cmd[0], var_len, NULL );
+                return ( u_char * ) &res_val;
+            }
+        case KWN_WLAN_DOWNLINK_LIMIT:
+            {
+                sprintf( cmd, "uci get wireless.@wifi-iface[%d].dllmt", ind );
+                kwn_get_value( KWN_TYPE_INTEGER32, &cmd[0], var_len, NULL );
+                return ( u_char * ) &res_val;
+            }
+        case KWN_WLAN_HIDE_ESSID:
+            {
+                sprintf( cmd, "uci get wireless.@wifi-iface[%d].hidden", ind );
+                kwn_get_value( KWN_TYPE_INTEGER32, &cmd[0], var_len, NULL );
+                return ( u_char * ) &res_val;
+            }
+        case KWN_WLAN_CUSTOMER_NAME:
+            {
+                sprintf( cmd, "uci get wireless.wifi%d.customername", ind );
+                kwn_get_value( KWN_TYPE_DISPLAY_STRING, &cmd[0], var_len, NULL );
+                return ( u_char * ) res_str;
+            }
+        case KWN_WLAN_LINKID:
+            {
+                sprintf( cmd, "uci get wireless.wifi%d.linkid", ind );
+                kwn_get_value( KWN_TYPE_INTEGER32, &cmd[0], var_len, NULL );
+                return ( u_char * ) &res_val;
+            }
+        case KWN_WLAN_SECURITY_ENC:
+            {
+                sprintf( cmd, "uci get wireless.@wifi-iface[%d].encryption", ind );
+                kwn_get_value( KWN_TYPE_INTEGER32, &cmd[0], var_len, &kwn_wireless_encryption );
+                return ( u_char * ) &res_val;
+            }
+        case KWN_WLAN_SECURITY_KEY:
+            {
+                sprintf( cmd, "uci get wireless.@wifi-iface[%d].key", ind );
+                kwn_get_value( KWN_TYPE_DISPLAY_STRING, &cmd[0], var_len, NULL );
+                return ( u_char * ) res_str;
+            }
+        case KWN_WLAN_MACFILTER:
+            {
+                sprintf( cmd, "uci get wireless.@wifi-iface[%d].macfilter", ind );
+                kwn_get_value( KWN_TYPE_INTEGER32, &cmd[0], var_len, &kwn_wireless_macfilter );
+                return ( u_char * ) &res_val;
+            }
+        case KWN_WLAN_MACLIST:
+            {
+                sprintf( cmd, "uci get wireless.@wifi-iface[%d].maclist", ind );
+                kwn_get_value( KWN_TYPE_DISPLAY_STRING, &cmd[0], var_len, NULL );
+                return ( u_char * ) res_str;
+            }
+        case KWN_WLAN_DISTANCE:
+            {
+                sprintf( cmd, "uci get wireless.wifi%d.distance", ind );
+                kwn_get_value( KWN_TYPE_INTEGER32, &cmd[0], var_len, NULL );
+                return (u_char *) &res_val;
+            }
+        case KWN_WLAN_SHORTGI:
+            {
+                sprintf( cmd, "uci get wireless.@wifi-iface[%d].shortgi", ind );
+                kwn_get_value( KWN_TYPE_INTEGER32, &cmd[0], var_len, NULL );
+                return ( u_char * ) &res_val;
+            }
+        case KWN_WLAN_TXCHAINMASK:
+            {
+                sprintf( cmd, "uci get wireless.wifi%d.txchainmask", ind );
+                kwn_get_value( KWN_TYPE_INTEGER32, &cmd[0], var_len, NULL );
+                return ( u_char * ) &res_val;
+            }
+        case KWN_WLAN_RXCHAINMASK:
+            {
+                sprintf( cmd, "uci get wireless.wifi%d.rxchainmask", ind );
+                kwn_get_value( KWN_TYPE_INTEGER32, &cmd[0], var_len, NULL );
+                return ( u_char * ) &res_val;
+            }
+        default:
+            ERROR_MSG ( "" );
+    }
+    return NULL;
+}
+
+/****************************************************************************
+ *                                                                          *
+ *   var_NwkIPTable() -                                                     *
+ *                                                                          *
+ ****************************************************************************/
+unsigned char *
+var_NwkIPTable ( struct variable *vp, 
+        oid     *name, 
+        size_t  *length, 
+        int     exact, 
+        size_t  *var_len, 
+        WriteMethod **write_method)
+{
+    char cmd[100];
+
+    if ( header_generic ( vp, name, length, exact, var_len, write_method )
+            == MATCH_FAILED )
+        return NULL;
+
+    memset( res_str, '\0', sizeof( res_str ) );
+    res_val = 0;
+    res_ip = 0;
+    *length = vp->namelen + 1;
+    *write_method = nwkwriteMethod;
+    switch ( (char) name[10] ) {
+        case KWN_NWK_ADRSTYPE:
+            {
+                sprintf( cmd, "uci get network.lan.proto" );
+                kwn_get_value( KWN_TYPE_INTEGER32, &cmd[0], var_len, &kwn_network_ip_type );
+                return ( u_char * ) &res_val;
+            }
+        case KWN_NWK_IP:
+            {
+                sprintf( cmd, "uci get network.lan.ipaddr" );
+                kwn_get_value( KWN_TYPE_IP_ADDRESS, &cmd[0], var_len, NULL );
+                return ( u_char * ) &res_ip;
+            }
+        case KWN_NWK_MASK:
+            {
+                sprintf( cmd, "uci get network.lan.netmask" );
+                kwn_get_value( KWN_TYPE_IP_ADDRESS, &cmd[0], var_len, NULL );
+                return ( u_char * ) &res_ip;
+            }
+        case KWN_NWK_GATEWAY:
+            {
+                sprintf( cmd, "uci get network.lan.gateway" );
+                kwn_get_value( KWN_TYPE_IP_ADDRESS, &cmd[0], var_len, NULL );
+                return ( u_char * ) &res_ip;
+            }
+        case KWN_NWK_DNS:
+            {
+                sprintf( cmd, "uci get network.lan.dns" );
+                kwn_get_value( KWN_TYPE_IP_ADDRESS, &cmd[0], var_len, NULL );
+                return ( u_char * ) &res_ip;
+            }
+        default:
+            ERROR_MSG ( "" );
+    }
+    return NULL;
+}
+
+/****************************************************************************
+ *                                                                           *
+ *   var_RadiusTable() -                                                     *
+ *                                                                           *
+ ****************************************************************************/
+unsigned char *
+var_RadiusTable ( struct variable *vp, 
+        oid     *name, 
+        size_t  *length, 
+        int     exact, 
+        size_t  *var_len, 
+        WriteMethod **write_method)
+{
+    char cmd[100];
+
+    if ( header_generic ( vp, name, length, exact, var_len, write_method )
+            == MATCH_FAILED )
+        return NULL;
+
+    memset( res_str, '\0', sizeof( res_str ) );
+    res_val = 0;
+    res_ip = 0;
+    *length = vp->namelen + 1;
+    *write_method = radiuswriteMethod;
+
+    switch ( (char) name[10] ) {
+        case KWN_RADIUS_STATUS:
+            {
+                sprintf( cmd, "uci get wrt-radauth.sys.enableRadAuth" );
+                kwn_get_value( KWN_TYPE_INTEGER32, &cmd[0], var_len, NULL );
+                return ( u_char * ) &res_val;
+            }
+        case KWN_RADIUS_PRISERVER:
+            {
+                sprintf( cmd, "uci get wrt-radauth.sys.primaryServer" );
+                kwn_get_value( KWN_TYPE_IP_ADDRESS, &cmd[0], var_len, NULL );
+                return ( u_char * ) &res_ip;
+            }
+        case KWN_RADIUS_PRIPORT:
+            sprintf( cmd, "uci get wrt-radauth.sys.primaryPort" );
+            kwn_get_value( KWN_TYPE_INTEGER32, &cmd[0], var_len, NULL );
+            return ( u_char * ) &res_val;
+        case KWN_RADIUS_PRISECRET:
+            {
+                sprintf( cmd, "uci get wrt-radauth.sys.primarySecret" );
+                kwn_get_value( KWN_TYPE_DISPLAY_STRING, &cmd[0], var_len, NULL );
+                return ( u_char * ) res_str;
+            }
+        case KWN_RADIUS_SECSERVER:
+            {
+                sprintf( cmd, "uci get wrt-radauth.sys.secondaryServer" );
+                kwn_get_value( KWN_TYPE_IP_ADDRESS, &cmd[0], var_len, NULL );
+                return ( u_char * ) &res_ip;
+            }
+        case KWN_RADIUS_SECPORT:
+            {
+                sprintf( cmd, "uci get wrt-radauth.sys.secondaryPort" );
+                kwn_get_value( KWN_TYPE_INTEGER32, &cmd[0], var_len, NULL );
+                return ( u_char * ) &res_val;
+            }
+        case KWN_RADIUS_SECSECRET:
+            {
+                sprintf( cmd, "uci get wrt-radauth.sys.secondarySecret" );
+                kwn_get_value( KWN_TYPE_DISPLAY_STRING, &cmd[0], var_len, NULL );
+                return ( u_char * ) res_str;
+            }
+        case KWN_RADIUS_REAUTHTIME:
+            {
+                sprintf( cmd, "uci get wrt-radauth.sys.reauthTime" );
+                kwn_get_value( KWN_TYPE_INTEGER32, &cmd[0], var_len, NULL );
+                return ( u_char * ) &res_val;
+            }
+        case KWN_RADIUS_RETRYTIME:
+            {
+                sprintf( cmd, "uci get wrt-radauth.sys.retryTime" );
+                kwn_get_value( KWN_TYPE_INTEGER32, &cmd[0], var_len, NULL );
+                return ( u_char * ) &res_val;
+            }
+        case KWN_RADIUS_RETRYCOUNT:
+            {
+                sprintf( cmd, "uci get wrt-radauth.sys.requestRetries" );
+                kwn_get_value( KWN_TYPE_INTEGER32, &cmd[0], var_len, NULL );
+                return ( u_char * ) &res_val;
+            }
+        case KWN_RADIUS_RETRYCOUNTPERIOD:
+            {
+                sprintf( cmd, "uci get wrt-radauth.sys.requestTimeout" );
+                kwn_get_value( KWN_TYPE_INTEGER32, &cmd[0], var_len, NULL );
+                return ( u_char * ) &res_val;
+            }
+        default:
+            ERROR_MSG ( "" );
+    }
+    return NULL;
+}
+
+/****************************************************************************
+ *                                                                           *
+ *   var_VlanTable() -                                                       *
+ *                                                                           *
+ ****************************************************************************/
+unsigned char *
+var_VlanTable ( struct variable *vp, 
+        oid     *name, 
+        size_t  *length, 
+        int     exact, 
+        size_t  *var_len, 
+        WriteMethod **write_method)
+{
+    char cmd[100];
+
+    if ( header_generic ( vp, name, length, exact, var_len, write_method )
+            == MATCH_FAILED )
+        return NULL;
+
+    memset( res_str, '\0', sizeof( res_str ) );
+    res_val = 0;
+    res_ip = 0;
+    *length = vp->namelen + 1;
+    *write_method = vlanwriteMethod;
+
+    switch ( (char) name[10] ) {
+        case KWN_VLAN_STATUS:
+            {
+                sprintf( cmd, "uci get vlan.vlan.status" );
+                kwn_get_value( KWN_TYPE_INTEGER32, &cmd[0], var_len, NULL );
+                return ( u_char * ) &res_val;
+            }
+        case KWN_VLAN_MODE:
+            {
+                sprintf( cmd, "uci get vlan.vlan.mode" );
+                kwn_get_value( KWN_TYPE_INTEGER32, &cmd[0], var_len, NULL );
+                return ( u_char * ) &res_val;
+            }
+        case KWN_VLAN_MGMTID:
+            {
+                sprintf( cmd, "uci get vlan.vlan.mgmtvlan" );
+                kwn_get_value( KWN_TYPE_INTEGER32, &cmd[0], var_len, NULL );
+                return ( u_char * ) &res_val;
+            }
+        case KWN_VLAN_ACCESSID:
+            {
+                sprintf( cmd, "uci get vlan.vlan.accessvlan" );
+                kwn_get_value( KWN_TYPE_INTEGER32, &cmd[0], var_len, NULL );
+                return ( u_char * ) &res_val;
+            }
+        case KWN_VLAN_TRUNKOPTION:
+            {
+                sprintf( cmd, "uci get vlan.vlan.trunkoption" );
+                kwn_get_value( KWN_TYPE_INTEGER32, &cmd[0], var_len, NULL );
+                return ( u_char * ) &res_val;
+            }
+        case KWN_VLAN_TRUNKID:
+            {
+                sprintf( cmd, "uci get vlan.vlan.trunkvlan" );
+                kwn_get_value( KWN_TYPE_INTEGER32, &cmd[0], var_len, NULL );
+                return ( u_char * ) res_str;
+            }
+        case KWN_VLAN_SVLAN:
+            {
+                sprintf( cmd, "uci get vlan.vlan.svlan" );
+                kwn_get_value( KWN_TYPE_INTEGER32, &cmd[0], var_len, NULL );
+                return ( u_char * ) &res_val;
+            }
+        case KWN_VLAN_SVLAN_ETHERTYPE:
+            {
+                sprintf( cmd, "uci get vlan.vlan.svlanethertype" );
+                kwn_get_value( KWN_TYPE_INTEGER32, &cmd[0], var_len, &kwn_network_vlan_ethertype );
+                return ( u_char * ) &res_val;
+            }
+        default:
+            ERROR_MSG ( "" );
+    }
+    return NULL;
+}
+
+/****************************************************************************
+ *                                                                           *
+ *   var_EthernetTable() -                                                   *
+ *                                                                           *
+ ****************************************************************************/
+unsigned char *
+var_EthernetTable ( struct variable *vp, 
+        oid     *name, 
+        size_t  *length, 
+        int     exact, 
+        size_t  *var_len, 
+        WriteMethod **write_method)
+{
+    char cmd[100];
+
+    if ( header_generic ( vp, name, length, exact, var_len, write_method )
+            == MATCH_FAILED )
+        return NULL;
+
+    memset( res_str, '\0', sizeof( res_str ) );
+    res_val = 0;
+    res_ip = 0;
+    *length = vp->namelen + 1;
+    *write_method = ethernetwriteMethod;
+
+    switch ( (char) name[10] ) {
+        case KWN_ETHERNET_MODE:
+            {
+                sprintf( cmd, "uci get ethernet.ethernet.mode" );
+                kwn_get_value( KWN_TYPE_INTEGER32, &cmd[0], var_len, NULL );
+                return ( u_char * ) &res_val;
+            }
+        case KWN_ETHERNET_INACTIVITY:
+            {
+                sprintf( cmd, "uci get ethernet.ethernet.ethtimer" );
+                kwn_get_value( KWN_TYPE_INTEGER32, &cmd[0], var_len, NULL );
+                return ( u_char * ) &res_val;
+            }
+        default:
+            ERROR_MSG ( "" );
+    }
+    return NULL;
+}
+
+/****************************************************************************
+ *                                                                           *
+ *   var_DhcpTable() -                                                       *
+ *                                                                           *
+ ****************************************************************************/
+unsigned char *
+var_DhcpTable ( struct variable *vp, 
+        oid     *name, 
+        size_t  *length, 
+        int     exact, 
+        size_t  *var_len, 
+        WriteMethod **write_method)
+{
+    char cmd[100];
+
+    if ( header_generic ( vp, name, length, exact, var_len, write_method )
+            == MATCH_FAILED )
+        return NULL;
+
+    memset( res_str, '\0', sizeof( res_str ) );
+    res_val = 0;
+    res_ip = 0;
+
+    *length = vp->namelen + 1;
+    *write_method = dhcpwriteMethod;
+
+    switch ( (char) name[10] ) {
+        case KWN_DHCP_SERVER:
+            {
+                sprintf( cmd, "uci get dhcp.lan.start" );
+                kwn_get_value( KWN_TYPE_INTEGER32, &cmd[0], var_len, NULL );
+                if( res_val == -1 )
+                    res_val = 0;
+                else
+                    res_val = 1;
+                return ( u_char * ) &res_val;
+            }
+        case KWN_DHCP_START:
+            {
+                sprintf( cmd, "uci get dhcp.lan.start" );
+                kwn_get_value( KWN_TYPE_INTEGER32, &cmd[0], var_len, NULL );
+                return ( u_char * ) &res_val;
+            }
+        case KWN_DHCP_LIMIT:
+            {
+                sprintf( cmd, "uci get dhcp.lan.limit" );
+                kwn_get_value( KWN_TYPE_INTEGER32, &cmd[0], var_len, NULL );
+                return ( u_char * ) &res_val;
+            }
+        case KWN_DHCP_LEASE_TIME:
+            {
+                sprintf( cmd, "uci get dhcp.lan.leasetime" );
+                kwn_get_value( KWN_TYPE_INTEGER32, &cmd[0], var_len, NULL );
+                return ( u_char * ) &res_val;
+            }
+        default:
+            ERROR_MSG ( "" );
+    }
+    return NULL;
+}
+
+/****************************************************************************
+ *                                                                          *
+ *   var_SystemTable() -                                                    *
+ *                                                                          *
+ ****************************************************************************/
+unsigned char *
+var_SystemTable ( struct variable *vp, 
+        oid     *name, 
+        size_t  *length, 
+        int     exact, 
+        size_t  *var_len, 
+        WriteMethod **write_method)
+{
+    char cmd[100];
+
+    if ( header_generic ( vp, name, length, exact, var_len, write_method )
+            == MATCH_FAILED )
+        return NULL;
+
+    memset( res_str, '\0', sizeof( res_str ) );
+    res_val = 0;
+    res_ip = 0;
+    *length = vp->namelen + 1;
+    *write_method = systemwriteMethod;
+
+    switch ( (char) name[10] ) {
+        case KWN_SYS_APPLY:
+            {
+                res_val = 0;
+                *var_len = sizeof ( long );
+                return ( u_char * ) &res_val;
+            }
+        case KWN_SYS_RESET:
+            {
+                res_val = 0;
+                *var_len = sizeof ( long );
+                return ( u_char * ) &res_val;
+            }
+        case KWN_SYS_REBOOT:
+            {
+                res_val = 0;
+                *var_len = sizeof ( long );
+                return ( u_char * ) &res_val;
+            }
+        case KWN_SYS_DYNAMIC_APPLY:
+            {
+                res_val = 0;
+                *var_len = sizeof ( long );
+                return ( u_char * ) &res_val;
+            }
+        default:
+            ERROR_MSG ( "" );
+    }
+    return NULL;
+}
+
+/****************************************************************************
+ *                                                                          *
+ *   var_WirelessStatsTable() -                                             *
+ *                                                                          *
+ ****************************************************************************/
+unsigned char *
+var_WirelessStatsTable ( struct variable *vp, 
+        oid     *name, 
+        size_t  *length, 
+        int     exact, 
+        size_t  *var_len, 
+        WriteMethod **write_method)
+{
+    char cmd[100];
+    int radio_ind;
+
+    radio_ind = ( int )name[12];
+    radio_ind = radio_ind - 1;
+    memset( res_str, '\0', sizeof( res_str ) );
+    res_val = 0;
+    res_ip = 0;
+    *length = vp->namelen + 1;
+    *write_method = NULL;
+
+    /* Get Associated list */
+    get_assoclist( radio_ind );
+    switch ( (char) name[11] ) {
+        case KWN_WIRELESSSTATS_RADIO_INDEX:
+            {
+                res_val = radio_ind + 1;
+                *var_len = sizeof ( long );
+                return ( u_char * ) &res_val;
+            }
+        case KWN_WIRELESSSTATS_REMOTEPARTNERS:
+            {
+                *var_len = sizeof ( long );
+                return ( u_char * ) &kwn_assoc_list.no_of_links;
+            }
+        default:
+            ERROR_MSG ( "" );
+    }
+    return NULL;
+}
+
+/****************************************************************************
+ *                                                                          *
+ *   var_EthernetStatsTable() -                                             *
+ *                                                                          *
+ ****************************************************************************/
+    unsigned char *
+var_EthernetStatsTable ( struct variable *vp, 
+        oid     *name, 
+        size_t  *length, 
+        int     exact, 
+        size_t  *var_len, 
+        WriteMethod **write_method)
+{
+    char cmd[100];
+
+    if ( header_generic ( vp, name, length, exact, var_len, write_method )
+            == MATCH_FAILED )
+        return NULL;
+
+    memset( res_str, '\0', sizeof( res_str ) );
+    res_val = 0;
+    res_ip = 0;
+    *length = vp->namelen + 1;
+    *write_method = NULL;
+
+    switch ( (char) name[10] ) {
+        case KWN_ETHSTATS_STATUS:
+            {
+                sprintf( cmd, "cat /sys/class/net/eth0/operstate" );
+                kwn_get_value( KWN_TYPE_DISPLAY_STRING, &cmd[0], var_len, NULL );
+                return ( u_char * ) res_str;
+            }
+        case KWN_ETHSTATS_SPEED:
+            {
+                sprintf( cmd, "ethtool eth0 | grep 'Speed' | sed 's/\tSpeed: //'" );
+                kwn_get_value( KWN_TYPE_DISPLAY_STRING, &cmd[0], var_len, NULL );
+                return ( u_char * ) res_str;
+            }
+        case KWN_ETHSTATS_DUPLEX:
+            {
+                sprintf( cmd, "ethtool eth0 | grep 'Duplex' | sed 's/\tDuplex: //'" );
+                kwn_get_value( KWN_TYPE_DISPLAY_STRING, &cmd[0], var_len, NULL );
+                return (u_char *) res_str;
+            }
+        default:
+            ERROR_MSG ( "" );
+    }
+    return NULL;
+}
+
+/****************************************************************************
+ *                                                                          *
+ *   var_AssocTable() -                                                     *
+ *                                                                          *
+ ****************************************************************************/
+unsigned char *
+var_AssocTable ( struct variable *vp, 
+        oid     *name, 
+        size_t  *length, 
+        int     exact, 
+        size_t  *var_len, 
+        WriteMethod **write_method)
+{
+    char cmd[100];
+    int radio_ind, sec_ind;
+
+    radio_ind = ( int )name[12];
+    sec_ind = ( int )name[13];
+    memset( res_str, '\0', sizeof( res_str ) );
+    res_val = 0;
+    res_ip = 0;
+    *length = vp->namelen + 2;
+    *write_method = NULL;
+
+    radio_ind = radio_ind - 1;
+    sec_ind = sec_ind - 1;
+    /* Get Associated list */
+    if( get_assoclist( radio_ind ) < 0 ) {
+        return SNMP_ERR_NOERROR;
+    }
+    /* If no links, return error */
+    if( kwn_assoc_list.no_of_links <= 0 ) {
+        return SNMP_ERR_NOERROR;
+    }
+    /* TODO: Assoc List for second radio to be supported */
+    if( radio_ind != 1 ) {
+        return SNMP_ERR_NOERROR;
+    }
+
+    /* If req index is <1 or >no.of links, return error */
+    if( sec_ind < 0 || sec_ind >= kwn_assoc_list.no_of_links ) {
+        return SNMP_ERR_NOERROR;
+    }
+    switch ( (char) name[11] ) {
+        case KWN_ASSOC_RADIO_INDEX:
+            {
+                res_val = radio_ind + 1;
+                *var_len = sizeof ( long );
+                return ( u_char * ) &res_val;
+            }
+        case KWN_ASSOC_SEC_INDEX:
+            {
+                res_val = sec_ind + 1;
+                *var_len = sizeof ( long );
+                return ( u_char * ) &res_val;
+            }
+        case KWN_ASSOC_MAC:
+            {
+                sprintf( res_str, "%02x:%02x:%02x:%02x:%02x:%02x",
+                        kwn_assoc_list.sta[sec_ind].mac[0],
+                        kwn_assoc_list.sta[sec_ind].mac[1],
+                        kwn_assoc_list.sta[sec_ind].mac[2],
+                        kwn_assoc_list.sta[sec_ind].mac[3],
+                        kwn_assoc_list.sta[sec_ind].mac[4],
+                        kwn_assoc_list.sta[sec_ind].mac[5] );
+                *var_len = strlen( res_str );
+                return ( u_char * ) res_str;
+            }
+        case KWN_ASSOC_IP:
+            {
+                *var_len = sizeof( in_addr_t );
+                return ( u_char * ) &kwn_assoc_list.sta[sec_ind].ip;
+            }
+        case KWN_ASSOC_REMOTE_LAT:
+            {
+                *var_len = strlen( kwn_assoc_list.sta[sec_ind].r_latitude );
+                return ( u_char * ) kwn_assoc_list.sta[sec_ind].r_latitude;
+            }
+        case KWN_ASSOC_REMOTE_LONG:
+            {
+                *var_len = strlen( kwn_assoc_list.sta[sec_ind].r_longitude );
+                return ( u_char * ) kwn_assoc_list.sta[sec_ind].r_longitude;
+            }
+        case KWN_ASSOC_LOCAL_LAT:
+            {
+                *var_len = strlen( kwn_assoc_list.sta[sec_ind].l_latitude );
+                return ( u_char * ) kwn_assoc_list.sta[sec_ind].l_latitude;
+            }
+        case KWN_ASSOC_LOCAL_LONG:
+            {
+                *var_len = strlen( kwn_assoc_list.sta[sec_ind].l_longitude );
+                return ( u_char * ) kwn_assoc_list.sta[sec_ind].l_longitude;
+            }
+        case KWN_ASSOC_RX_RATE:
+            {
+                *var_len = sizeof ( long );
+                return ( u_char * ) &kwn_assoc_list.sta[sec_ind].rx_rate;
+            }
+        case KWN_ASSOC_TX_RATE:
+            {
+                *var_len = sizeof ( long );
+                return ( u_char * ) &kwn_assoc_list.sta[sec_ind].tx_rate;
+            }
+        case KWN_ASSOC_RX_TPUT:
+            {
+                *var_len = sizeof ( long );
+                return ( u_char * ) &kwn_assoc_list.sta[sec_ind].rx_tput;
+            }
+        case KWN_ASSOC_TX_TPUT:
+            {
+                *var_len = sizeof ( long );
+                return ( u_char * ) &kwn_assoc_list.sta[sec_ind].tx_tput;
+            }
+        case KWN_ASSOC_LOCAL_SNR_A1:
+            {
+                *var_len = sizeof ( long );
+                return ( u_char * ) &kwn_assoc_list.sta[sec_ind].local_snr_a1;
+            }
+        case KWN_ASSOC_LOCAL_SNR_A2:
+            {
+                *var_len = sizeof ( long );
+                return ( u_char * ) &kwn_assoc_list.sta[sec_ind].local_snr_a2;
+            }
+        case KWN_ASSOC_REMOTE_SNR_A1:
+            {
+                *var_len = sizeof ( long );
+                return ( u_char * ) &kwn_assoc_list.sta[sec_ind].remote_snr_a1;
+            }
+        case KWN_ASSOC_REMOTE_SNR_A2:
+            {
+                *var_len = sizeof ( long );
+                return ( u_char * ) &kwn_assoc_list.sta[sec_ind].remote_snr_a2;
+            }
+        case KWN_ASSOC_LOCAL_PHY_ERR:
+            {
+                *var_len = sizeof ( long );
+                return ( u_char * ) &kwn_assoc_list.sta[sec_ind].local_phy_err;
+            }
+        case KWN_ASSOC_REMOTE_PHY_ERR:
+            {
+                *var_len = sizeof ( long );
+                return ( u_char * ) &kwn_assoc_list.sta[sec_ind].remote_phy_err;
+            }
+        case KWN_ASSOC_LOCAL_MPDU_ERR:
+            {
+                *var_len = sizeof ( long );
+                return ( u_char * ) &kwn_assoc_list.sta[sec_ind].local_mpdu_err;
+            }
+        case KWN_ASSOC_REMOTE_MPDU_ERR:
+            {
+                *var_len = sizeof ( long );
+                return ( u_char * ) &kwn_assoc_list.sta[sec_ind].remote_mpdu_err;
+            }
+        case KWN_ASSOC_LOCAL_RETRIES:
+            {
+                *var_len = sizeof ( long );
+                return ( u_char * ) &kwn_assoc_list.sta[sec_ind].local_retries;
+            }
+        case KWN_ASSOC_REMOTE_RETRIES:
+            {
+                *var_len = sizeof ( long );
+                return (u_char *) &kwn_assoc_list.sta[sec_ind].remote_retries;
+            }
+        case KWN_ASSOC_LINKTEST_DUR:
+            {
+                *write_method = AssocwriteMethod;
+                sprintf( cmd, "uci get tool.tool.dur" );
+                kwn_get_value( KWN_TYPE_INTEGER32, &cmd[0], var_len, NULL );
+                return ( u_char * ) &res_val;
+            }
+        case KWN_ASSOC_LINKTEST_DIR:
+            {
+                *write_method = AssocwriteMethod;
+                sprintf( cmd, "uci get tool.tool.dir" );
+                kwn_get_value( KWN_TYPE_INTEGER32, &cmd[0], var_len, NULL );
+                return ( u_char * ) &res_val;
+            }
+        case KWN_ASSOC_LINKTEST_START_STOP:
+            {
+                *write_method = AssocwriteMethod;
+                sprintf( cmd, "iwpriv ath1 g_kwn_tput_test | sed 's/ath1      g_kwn_tput_test://'" );
+                kwn_get_value( KWN_TYPE_INTEGER32, &cmd[0], var_len, NULL );
+                return ( u_char * ) &res_val;
+            }
+        case KWN_ASSOC_LOCAL_NOISE_FLOOR:
+            {
+                *var_len = sizeof ( long );
+                return (u_char *) &kwn_assoc_list.sta[sec_ind].local_noise_floor;
+            }
+        case KWN_ASSOC_REMOTE_NOISE_FLOOR:
+            {
+                *var_len = sizeof ( long );
+                return (u_char *) &kwn_assoc_list.sta[sec_ind].remote_noise_floor;
+            }
+        default:
+            ERROR_MSG ( "" );
+    }
+    return NULL;
+}
+
+int
+wlanwriteMethod( int action,
+        u_char * var_val,
+        u_char var_val_type,
+        size_t var_val_len,
+        u_char * statP, oid * name, size_t name_len )
+{
+    char cmd[100];
+    int ind;
+    long long_val;
+    char str_val[ KWN_UCI_STR_ENUM_LEN ];
+
+    if ( var_val_type == ASN_INTEGER ) {
+        long_val = *( (long *) var_val );
+    }
+    var_val[ var_val_len ] = '\0';
+    ind = (int) name[13];
+    if( ind < 1 || ind > 2 )
+        return NULL;
+    ind = ind - 1;
+    switch ( action ) {
+        case RESERVE1:             /* Check values for acceptability */
+            break;
+        case RESERVE2:             /* Allocate memory and similar resources */
+            break;
+        case ACTION:               /* Perform the SET action (if reversible) */
+            {
+                switch ( (char) name[12] ) {
+                    case KWN_WLAN_RADIOMODE:
+                        kwn_enum_str_set( long_val, &kwn_wireless_radio_mode, &str_val[0] );
+                        sprintf( cmd, "uci set wireless.@wifi-iface[%d].mode='%s'", ind, str_val );
+                        system( cmd );
+                        break;
+                    case KWN_WLAN_SSID:
+                        sprintf( cmd, "uci set wireless.@wifi-iface[%d].ssid='%s'", ind, var_val );
+                        system( cmd );
+                        break;
+                    case KWN_WLAN_COUNTRY:
+                        /* Configuration of country is not supported for 2.4 Radio */
+                        if( ind == 0 )
+                            return SNMP_ERR_GENERR;
+                        kwn_enum_str_set( long_val, &kwn_wireless_country, &str_val[0] );
+                        sprintf( cmd, "uci set wireless.wifi%d.country='%s'", ind, str_val );
+                        system( cmd );
+                        break;
+                    case KWN_WLAN_OPMODE:
+                        kwn_enum_str_set( long_val, &kwn_wireless_opmode, &str_val[0] );
+                        sprintf( cmd, "uci set wireless.wifi%d.hwmode='%s'", ind, str_val );
+                        system( cmd );
+                        break;
+                    case KWN_WLAN_BANDWIDTH:
+                        kwn_enum_str_set( long_val, &kwn_wireless_bandwidth, &str_val[0] );
+                        sprintf( cmd, "uci set wireless.wifi%d.htmode='%s'", ind, str_val );
+                        system( cmd );
+                        break;
+                    case KWN_WLAN_CHANNEL:
+                        if ( long_val == -1 )
+                            sprintf( cmd, "uci set wireless.wifi%d.channel='auto'" );
+                        else
+                            sprintf( cmd, "uci set wireless.wifi%d.channel='%d'", ind, long_val );
+                        system( cmd );
+                        break;
+                    case KWN_WLAN_RATE:
+                        /* Configuration of rate is not supported for 2.4 Radio */
+                        if( ind == 0 )
+                            return SNMP_ERR_GENERR;
+                        if ( long_val == -1 )
+                            sprintf( cmd, "uci set wireless.wifi%d.rate='auto'" );
+                        else
+                            sprintf( cmd, "uci set wireless.wifi%d.rate='%d'", ind, long_val );
+                        system( cmd );
+                        break;
+                    case KWN_WLAN_TXPOWER:
+                        sprintf( cmd, "uci set wireless.wifi%d.TXPowLim5G='%d'", ind, long_val );
+                        system( cmd );
+                        break;
+                    case KWN_WLAN_AMSDU:
+                        /* Configuration of AMSDU is not supported for 2.4 Radio */
+                        if( ind == 0 )
+                            return SNMP_ERR_GENERR;
+                        sprintf( cmd, "uci set wireless.@wifi-iface[%d].kwnamsdu='%d'", ind, long_val );
+                        system( cmd );
+                        break;
+                    case KWN_WLAN_UPLINK_LIMIT:
+                        /* Configuration of uplink limit is not supported for 2.4 Radio */
+                        if( ind == 0 )
+                            return SNMP_ERR_GENERR;
+                        sprintf( cmd, "uci set wireless.@wifi-iface[%d].ullmt='%d'", ind, long_val );
+                        system( cmd );
+                        break;
+                    case KWN_WLAN_DOWNLINK_LIMIT:
+                        /* Configuration of downlink limit is not supported for 2.4 Radio */
+                        if( ind == 0 )
+                            return SNMP_ERR_GENERR;
+                        sprintf( cmd, "uci set wireless.@wifi-iface[%d].dllmt='%d'", ind, long_val );
+                        system( cmd );
+                        break;
+                    case KWN_WLAN_HIDE_ESSID:
+                        sprintf( cmd, "uci set wireless.@wifi-iface[%d].hidden='%d'", ind, long_val );
+                        system( cmd );
+                        break;
+                    case KWN_WLAN_CUSTOMER_NAME:
+                        /* Configuration of customer name is not supported for 2.4 Radio */
+                        if( ind == 0 )
+                            return SNMP_ERR_GENERR;
+                        sprintf( cmd, "uci set wireless.wifi%d.customername='%s'", ind, var_val );
+                        system( cmd );
+                        break;
+                    case KWN_WLAN_LINKID:
+                        /* Configuration of link id is not supported for 2.4 Radio */
+                        if( ind == 0 )
+                            return SNMP_ERR_GENERR;
+                        sprintf( cmd, "uci set wireless.wifi%d.linkid='%d'", ind, long_val );
+                        system( cmd );
+                        break;
+                    case KWN_WLAN_SECURITY_ENC:
+                        kwn_enum_str_set( long_val, &kwn_wireless_encryption, &str_val[0] );
+                        sprintf( cmd, "uci set wireless.@wifi-iface[%d].encryption='%s'", ind, str_val );
+                        system( cmd );
+                        break;
+                    case KWN_WLAN_SECURITY_KEY:
+                        sprintf( cmd, "uci set wireless.@wifi-iface[%d].key='%s'", ind, var_val );
+                        system( cmd );
+                        break;
+                    case KWN_WLAN_MACFILTER:
+                        kwn_enum_str_set( long_val, &kwn_wireless_macfilter, &str_val[0] );
+                        sprintf( cmd, "uci set wireless.@wifi-iface[%d].macfilter='%s'", ind, str_val );
+                        system( cmd );
+                        break;
+                    case KWN_WLAN_MACLIST:
+                        sprintf( cmd, "uci set wireless.@wifi-iface[%d].maclist='%s'", ind, var_val );
+                        system( cmd );
+                        break;
+                    case KWN_WLAN_DISTANCE:
+                        /* Configuration of distance is not supported for 2.4 Radio */
+                        if( ind == 0 )
+                            return SNMP_ERR_GENERR;
+                        sprintf( cmd, "uci set wireless.wifi%d.distance='%d'", ind, long_val );
+                        system( cmd );
+                        break;
+                    case KWN_WLAN_SHORTGI:
+                        /* Configuration of short gi is not supported for 2.4 Radio */
+                        if( ind == 0 )
+                            return SNMP_ERR_GENERR;
+                        sprintf( cmd, "uci set wireless.@wifi-iface[%d].shortgi='%d'", ind, long_val );
+                        system( cmd );
+                        break;
+                    case KWN_WLAN_TXCHAINMASK:
+                        /* Configuration of tx chainmask is not supported for 2.4 Radio */
+                        if( ind == 0 )
+                            return SNMP_ERR_GENERR;
+                        sprintf( cmd, "uci set wireless.wifi%d.txchainmask='%d'", ind, long_val );
+                        system( cmd );
+                        break;
+                    case KWN_WLAN_RXCHAINMASK:
+                        /* Configuration of rx chainmask is not supported for 2.4 Radio */
+                        if( ind == 0 )
+                            return SNMP_ERR_GENERR;
+                        sprintf( cmd, "uci set wireless.wifi%d.rxchainmask='%d'", ind, long_val );
+                        system( cmd );
+                        break;
+                    default:
+                        return SNMP_ERR_GENERR;
+                }
+            }
+            break;
+        case UNDO:                 /* Reverse the SET action and free resources */
+            break;
+        case COMMIT:
+            snmp_save_persistent( netsnmp_ds_get_string( NETSNMP_DS_LIBRARY_ID, NETSNMP_DS_LIB_APPTYPE ) );
+            (void) snmp_call_callbacks( SNMP_CALLBACK_LIBRARY, SNMP_CALLBACK_STORE_DATA, NULL );
+            snmp_clean_persistent( netsnmp_ds_get_string( NETSNMP_DS_LIBRARY_ID, NETSNMP_DS_LIB_APPTYPE ) );
+            break;
+        case FREE:                 /* Free any resources allocated */
+            break;
+    }
+    return SNMP_ERR_NOERROR;
+}
+
+int
+nwkwriteMethod( int action,
+        u_char * var_val,
+        u_char var_val_type,
+        size_t var_val_len,
+        u_char * statP, oid * name, size_t name_len )
+{
+    char cmd[100];
+    char ip[30];
+    long long_val;
+    char str_val[ KWN_UCI_STR_ENUM_LEN ];
+
+    if ( var_val_type == ASN_INTEGER ) {
+        long_val = *( (long *) var_val );
+    }
+
+    var_val[var_val_len] = '\0';
+    switch (action) {
+        case RESERVE1:             /* Check values for acceptability */
+            break;
+        case RESERVE2:             /* Allocate memory and similar resources */
+            break;
+        case ACTION:               /* Perform the SET action (if reversible) */
+            {
+                switch( (char) name[10] ) {
+                    case KWN_NWK_ADRSTYPE:
+                        kwn_enum_str_set( long_val, &kwn_network_ip_type, &str_val[0] );
+                        sprintf( cmd, "uci set network.lan.proto='%s'", str_val );
+                        system( cmd );
+                        break;
+                    case KWN_NWK_IP:
+                        {
+                            char buf1[30];
+                            u_long ip1;
+                            memcpy( buf1, var_val, (var_val_len > 8) ? 8 : var_val_len );
+                            ip1 = *( (u_long *) buf1 );
+                            kwn_conv_uint32_to_ip( var_val, var_val_len, &ip[0] );
+                            sprintf( cmd, "uci set network.lan.ipaddr='%s'", ip );
+                            system( cmd );
+                        }
+                        break;
+                    case KWN_NWK_MASK:
+                        kwn_conv_uint32_to_ip( var_val, var_val_len, &ip[0] );
+                        sprintf( cmd, "uci set network.lan.netmask='%s'", ip );
+                        system( cmd );
+                        break;
+                    case KWN_NWK_GATEWAY:
+                        kwn_conv_uint32_to_ip( var_val, var_val_len, &ip[0] );
+                        sprintf( cmd, "uci set network.lan.gateway='%s'", ip );
+                        system( cmd );
+                        break;
+                    case KWN_NWK_DNS:
+                        kwn_conv_uint32_to_ip( var_val, var_val_len, &ip[0] );
+                        sprintf( cmd, "uci set network.lan.dns='%s'", ip );
+                        system( cmd );
+                        break;
+                    default:
+                        return SNMP_ERR_GENERR;
+                }
+            }
+            break;
+        case UNDO:                 /* Reverse the SET action and free resources */
+            break;
+        case COMMIT:
+            snmp_save_persistent( netsnmp_ds_get_string ( NETSNMP_DS_LIBRARY_ID, NETSNMP_DS_LIB_APPTYPE ) );
+            (void) snmp_call_callbacks( SNMP_CALLBACK_LIBRARY, SNMP_CALLBACK_STORE_DATA, NULL );
+            snmp_clean_persistent( netsnmp_ds_get_string ( NETSNMP_DS_LIBRARY_ID, NETSNMP_DS_LIB_APPTYPE ) );
+            break;
+        case FREE:                 /* Free any resources allocated */
+            break;
+    }
+    return SNMP_ERR_NOERROR;
+}
+
+int
+radiuswriteMethod( int action,
+        u_char * var_val,
+        u_char var_val_type,
+        size_t var_val_len,
+        u_char * statP, oid * name, size_t name_len )
+{
+    char cmd[100];
+    char ip[30];
+    long long_val;
+    
+    if ( var_val_type == ASN_INTEGER ) {
+        long_val = *( (long *) var_val );
+    }
+
+    var_val[var_val_len] = '\0';
+    switch ( action ) {
+        case RESERVE1:             /* Check values for acceptability */
+            break;
+        case RESERVE2:             /* Allocate memory and similar resources */
+            break;
+        case ACTION:               /* Perform the SET action (if reversible) */
+            {
+                switch( (char) name[10] ) {
+                    case KWN_RADIUS_STATUS:
+                        sprintf( cmd, "uci set wrt-radauth.sys.enableRadAuth='%d'", long_val );
+                        system( cmd );
+                        break;
+                    case KWN_RADIUS_PRISERVER:
+                        kwn_conv_uint32_to_ip( var_val, var_val_len, &ip[0] );
+                        sprintf( cmd, "uci set wrt-radauth.sys.primaryServer='%s'", ip );
+                        system( cmd );
+                        break;
+                    case KWN_RADIUS_PRIPORT:
+                        sprintf( cmd, "uci set wrt-radauth.sys.primaryPort='%d'", long_val );
+                        system( cmd );
+                        break;
+                    case KWN_RADIUS_PRISECRET:
+                        sprintf( cmd, "uci set wrt-radauth.sys.primarySecret='%s'", var_val );
+                        system( cmd );
+                        break;
+                    case KWN_RADIUS_SECSERVER:
+                        kwn_conv_uint32_to_ip( var_val, var_val_len, &ip[0] );
+                        sprintf( cmd, "uci set wrt-radauth.sys.secondaryServer='%s'", ip );
+                        system( cmd );
+                        break;
+                    case KWN_RADIUS_SECPORT:
+                        sprintf( cmd, "uci set wrt-radauth.sys.secondaryPort='%d'", long_val );
+                        system( cmd );
+                        break;
+                    case KWN_RADIUS_SECSECRET:
+                        sprintf( cmd, "uci set wrt-radauth.sys.secondarySecret='%s'", var_val );
+                        system( cmd );
+                        break;
+                    case KWN_RADIUS_REAUTHTIME:
+                        sprintf( cmd, "uci set wrt-radauth.sys.reauthTime='%d'", long_val );
+                        system( cmd );
+                        break;
+                    case KWN_RADIUS_RETRYTIME:
+                        sprintf( cmd, "uci set wrt-radauth.sys.retryTime='%d'", long_val );
+                        system( cmd );
+                        break;
+                    case KWN_RADIUS_RETRYCOUNT:
+                        sprintf( cmd, "uci set wrt-radauth.sys.requestRetries='%d'", long_val );
+                        system( cmd );
+                        break;
+                    case KWN_RADIUS_RETRYCOUNTPERIOD:
+                        sprintf( cmd, "uci set wrt-radauth.sys.requestTimeout='%d'", long_val );
+                        system( cmd );
+                        break;
+                    default:
+                        return SNMP_ERR_GENERR;
+                }
+            }
+            break;
+        case UNDO:                 /* Reverse the SET action and free resources */
+            break;
+        case COMMIT:
+            snmp_save_persistent( netsnmp_ds_get_string( NETSNMP_DS_LIBRARY_ID, NETSNMP_DS_LIB_APPTYPE ) );
+            (void) snmp_call_callbacks( SNMP_CALLBACK_LIBRARY, SNMP_CALLBACK_STORE_DATA, NULL );
+            snmp_clean_persistent( netsnmp_ds_get_string( NETSNMP_DS_LIBRARY_ID, NETSNMP_DS_LIB_APPTYPE ) );
+            break;
+        case FREE:                 /* Free any resources allocated */
+            break;
+    }
+    return SNMP_ERR_NOERROR;
+}
+
+int
+vlanwriteMethod( int action,
+        u_char * var_val,
+        u_char var_val_type,
+        size_t var_val_len,
+        u_char * statP, oid * name, size_t name_len )
+{
+    char cmd[100];
+    long long_val;
+    char str_val[ KWN_UCI_STR_ENUM_LEN ];
+    
+    if ( var_val_type == ASN_INTEGER ) {
+        long_val = *( (long *) var_val );
+    }
+
+    var_val[var_val_len] = '\0';
+    switch ( action ) {
+        case RESERVE1:             /* Check values for acceptability */
+            break;
+        case RESERVE2:             /* Allocate memory and similar resources */
+            break;
+        case ACTION:               /* Perform the SET action (if reversible) */
+            {
+                switch( (char) name[10] ) {
+                    case KWN_VLAN_STATUS:
+                        sprintf( cmd, "uci set vlan.vlan.status='%d'", long_val );
+                        system( cmd );
+                        break;
+                    case KWN_VLAN_MODE:
+                        sprintf( cmd, "uci set vlan.vlan.mode='%d'", long_val );
+                        system( cmd );
+                        break;
+                    case KWN_VLAN_MGMTID:
+                        sprintf( cmd, "uci set vlan.vlan.mgmtvlan='%d'", long_val );
+                        system( cmd );
+                        break;
+                    case KWN_VLAN_ACCESSID:
+                        sprintf( cmd, "uci set vlan.vlan.accessvlan='%d'", long_val );
+                        system( cmd );
+                        break;
+                    case KWN_VLAN_TRUNKOPTION:
+                        sprintf( cmd, "uci set vlan.vlan.trunkoption='%d'", long_val );
+                        system( cmd );
+                        break;
+                    case KWN_VLAN_TRUNKID:
+                        sprintf( cmd, "uci set vlan.vlan.trunkvlan='%s'", var_val );
+                        system( cmd );
+                        break;
+                    case KWN_VLAN_SVLAN:
+                        sprintf( cmd, "uci set vlan.vlan.svlan='%d'", long_val );
+                        system( cmd );
+                        break;
+                    case KWN_VLAN_SVLAN_ETHERTYPE:
+                        kwn_enum_str_set( long_val, &kwn_network_vlan_ethertype, &str_val[0] );
+                        sprintf( cmd, "uci set vlan.vlan.svlanethertype='%s'", str_val );
+                        system( cmd );
+                        break;
+                    default:
+                        return SNMP_ERR_GENERR;
+                }
+            }
+            break;
+        case UNDO:                 /* Reverse the SET action and free resources */
+            break;
+        case COMMIT:
+            snmp_save_persistent( netsnmp_ds_get_string( NETSNMP_DS_LIBRARY_ID, NETSNMP_DS_LIB_APPTYPE ) );
+            (void) snmp_call_callbacks( SNMP_CALLBACK_LIBRARY, SNMP_CALLBACK_STORE_DATA, NULL );
+            snmp_clean_persistent( netsnmp_ds_get_string( NETSNMP_DS_LIBRARY_ID, NETSNMP_DS_LIB_APPTYPE ) );
+            break;
+        case FREE:                 /* Free any resources allocated */
+            break;
+    }
+    return SNMP_ERR_NOERROR;
+}
+
+int
+ethernetwriteMethod( int action,
+        u_char * var_val,
+        u_char var_val_type,
+        size_t var_val_len,
+        u_char * statP, oid * name, size_t name_len )
+{
+    char cmd[100];
+    long long_val;
+    
+    if ( var_val_type == ASN_INTEGER ) {
+        long_val = *( (long *) var_val );
+    }
+
+    var_val[var_val_len] = '\0';
+    switch ( action ) {
+        case RESERVE1:             /* Check values for acceptability */
+            break;
+        case RESERVE2:             /* Allocate memory and similar resources */
+            break;
+        case ACTION:               /* Perform the SET action (if reversible) */
+            {
+                switch( (char) name[10] ) {
+                    case KWN_ETHERNET_MODE:
+                        sprintf( cmd, "uci set ethernet.ethernet.mode='%d'", long_val );
+                        system( cmd );
+                        break;
+                    case KWN_ETHERNET_INACTIVITY:
+                        sprintf( cmd, "uci set ethernet.ethernet.ethtimer='%d'", long_val );
+                        system( cmd );
+                        break;
+                    default:
+                        return SNMP_ERR_GENERR;
+                }
+            }
+            break;
+        case UNDO:                 /* Reverse the SET action and free resources */
+            break;
+        case COMMIT:
+            snmp_save_persistent( netsnmp_ds_get_string( NETSNMP_DS_LIBRARY_ID, NETSNMP_DS_LIB_APPTYPE ) );
+            (void) snmp_call_callbacks( SNMP_CALLBACK_LIBRARY, SNMP_CALLBACK_STORE_DATA, NULL );
+            snmp_clean_persistent( netsnmp_ds_get_string( NETSNMP_DS_LIBRARY_ID, NETSNMP_DS_LIB_APPTYPE ) );
+            break;
+        case FREE:                 /* Free any resources allocated */
+            break;
+    }
+    return SNMP_ERR_NOERROR;
+}
+
+int
+dhcpwriteMethod( int action,
+        u_char * var_val,
+        u_char var_val_type,
+        size_t var_val_len,
+        u_char * statP, oid * name, size_t name_len )
+{
+    char cmd[100];
+    int val;
+    long long_val;
+    
+    if ( var_val_type == ASN_INTEGER ) {
+        long_val = *( (long *) var_val );
+    }
+
+    var_val[var_val_len] = '\0';
+    switch( action ) {
+        case RESERVE1:             /* Check values for acceptability */
+            break;
+        case RESERVE2:             /* Allocate memory and similar resources */
+            break;
+        case ACTION:               /* Perform the SET action (if reversible) */
+            {
+                switch( (char) name[10] ) {
+                    case KWN_DHCP_SERVER:
+                        if( long_val == 1 ) {
+                            sprintf( cmd, "uci set dhcp.lan=dhcp" );
+                            system( cmd );
+                            sprintf( cmd, "uci set dhcp.lan.interface='lan'" );
+                            system( cmd );
+                            sprintf( cmd, "uci set dhcp.lan.start='100'" );
+                            system( cmd );
+                            sprintf( cmd, "uci set dhcp.lan.limit='150'" );
+                            system( cmd );
+                            sprintf( cmd, "uci set dhcp.lan.leasetime='12h'" );
+                            system( cmd );
+                            sprintf( cmd, "uci set dhcp.lan.dhcpv6='server'" );
+                            system( cmd );
+                            sprintf( cmd, "uci set dhcp.lan.ra='server'" );
+                            system( cmd );
+                        }
+                        else if( long_val == 0 ) {
+                            sprintf( cmd, "uci delete dhcp.lan" );
+                            system( cmd );
+                        }
+                        else
+                            return SNMP_ERR_GENERR;
+                        break;
+                    case KWN_DHCP_START:
+                        sprintf( cmd, "uci set dhcp.lan.start='%d'", long_val );
+                        system( cmd );
+                        break;
+                    case KWN_DHCP_LIMIT:
+                        sprintf( cmd, "uci set dhcp.lan.limit='%d'", long_val );
+                        system( cmd );
+                        break;
+                    case KWN_DHCP_LEASE_TIME:
+                        sprintf( cmd, "uci set dhcp.lan.leasetime='%d'", long_val );
+                        system( cmd );
+                        break;
+                    default:
+                        return SNMP_ERR_GENERR;
+                }
+            }
+            break;
+        case UNDO:                 /* Reverse the SET action and free resources */
+            break;
+        case COMMIT:
+            snmp_save_persistent( netsnmp_ds_get_string( NETSNMP_DS_LIBRARY_ID, NETSNMP_DS_LIB_APPTYPE ) );
+            (void) snmp_call_callbacks( SNMP_CALLBACK_LIBRARY, SNMP_CALLBACK_STORE_DATA, NULL );
+            snmp_clean_persistent( netsnmp_ds_get_string( NETSNMP_DS_LIBRARY_ID, NETSNMP_DS_LIB_APPTYPE ) );
+            break;
+        case FREE:                 /* Free any resources allocated */
+            break;
+    }
+    return SNMP_ERR_NOERROR;
+}
+
+int
+systemwriteMethod( int action,
+        u_char * var_val,
+        u_char var_val_type,
+        size_t var_val_len,
+        u_char * statP, oid * name, size_t name_len )
+{
+    char cmd[100];
+    int val;
+    long long_val;
+    
+    if ( var_val_type == ASN_INTEGER ) {
+        long_val = *( (long *) var_val );
+    }
+
+    var_val[var_val_len] = '\0';
+    switch( action ) {
+        case RESERVE1:             /* Check values for acceptability */
+            break;
+        case RESERVE2:             /* Allocate memory and similar resources */
+            break;
+        case ACTION:               /* Perform the SET action (if reversible) */
+            {
+                switch( (char) name[10] ) {
+                    case KWN_SYS_APPLY:
+                        if( long_val == 1 ) {
+                            system( "uci commit" );
+                            system( "reload_config" );
+                        }
+                        break;
+                    case KWN_SYS_RESET:
+                        if( long_val == 1 ) {
+                            system( "sleep 1; killall dropbear uhttpd; sleep 1; jffs2reset -y && reboot" );
+                        }
+                        break;
+                    case KWN_SYS_REBOOT:
+                        if( long_val == 1 ) {
+                            system( "reboot" );
+                        }
+                        break;
+                    case KWN_SYS_DYNAMIC_APPLY:
+                        /* Updating Rate dynamically for 5GHz Radio */
+                        if( long_val == 1 ) {
+                            system("/usr/sbin/rate.sh");
+                        }
+                        break;
+                    default:
+                        return SNMP_ERR_GENERR;
+                }
+            }
+            break;
+        case UNDO:                 /* Reverse the SET action and free resources */
+            break;
+        case COMMIT:
+            snmp_save_persistent( netsnmp_ds_get_string( NETSNMP_DS_LIBRARY_ID, NETSNMP_DS_LIB_APPTYPE ) );
+            (void) snmp_call_callbacks( SNMP_CALLBACK_LIBRARY, SNMP_CALLBACK_STORE_DATA, NULL );
+            snmp_clean_persistent( netsnmp_ds_get_string( NETSNMP_DS_LIBRARY_ID, NETSNMP_DS_LIB_APPTYPE ) );
+            break;
+        case FREE:                 /* Free any resources allocated */
+            break;
+    }
+    return SNMP_ERR_NOERROR;
+}
+
+int
+AssocwriteMethod( int action,
+        u_char * var_val,
+        u_char var_val_type,
+        size_t var_val_len,
+        u_char * statP, oid * name, size_t name_len )
+{
+    char cmd[100];
+    int radio_ind, sec_ind;
+    long long_val;
+    
+    radio_ind = ( int )name[12];
+    sec_ind = ( int )name[13];
+    radio_ind = radio_ind - 1;
+    sec_ind = sec_ind - 1;
+    if ( var_val_type == ASN_INTEGER ) {
+        long_val = *( (long *) var_val );
+    }
+    var_val[ var_val_len ] = '\0';
+    if( radio_ind != 1 )
+        return NULL;
+    /* Get Associated list */
+    if( get_assoclist( radio_ind ) < 0 ) {
+        return SNMP_ERR_NOERROR;
+    }
+    if( sec_ind >= kwn_assoc_list.no_of_links ) {
+        return SNMP_ERR_NOERROR;
+    }
+    switch ( action ) {
+        case RESERVE1:             /* Check values for acceptability */
+            break;
+        case RESERVE2:             /* Allocate memory and similar resources */
+            break;
+        case ACTION:               /* Perform the SET action (if reversible) */
+            {
+                switch ( (char) name[11] ) {
+                    case KWN_ASSOC_LINKTEST_DUR:
+                        sprintf( cmd, "uvi set tool.tool.dur='%d'",long_val );
+                        system( cmd );
+                        break;
+                    case KWN_ASSOC_LINKTEST_DIR:
+                        sprintf( cmd, "uci set tool.tool.dir='%d'",long_val );
+                        system( cmd );
+                        break;
+                    case KWN_ASSOC_LINKTEST_START_STOP:
+                        if( long_val == 1 ) {
+                            char mac[100];
+                            sprintf( mac, "%02x:%02x:%02x:%02x:%02x:%02x",
+                                    kwn_assoc_list.sta[sec_ind].mac[0], kwn_assoc_list.sta[sec_ind].mac[1], 
+                                    kwn_assoc_list.sta[sec_ind].mac[2], kwn_assoc_list.sta[sec_ind].mac[3],
+                                    kwn_assoc_list.sta[sec_ind].mac[4], kwn_assoc_list.sta[sec_ind].mac[5] );
+                            sprintf( cmd, "uci set tool.tool.cnt='1'" );
+                            system( cmd );
+                            sprintf( cmd, "uci set tool.tool.mac='%s'", mac);
+                            system( cmd );
+                            sprintf( cmd, "/etc/init.d/KWtool start" );
+                            system( cmd );
+                            sprintf( cmd, "iwpriv ath1 kwn_tput_test 1" );
+                            system( cmd );
+                        }
+                        else {
+                            sprintf( cmd, "iwpriv ath1 kwn_tput_test 0");
+                            system( cmd );
+                        }
+                        break;
+                    default:
+                        return SNMP_ERR_GENERR;
+                }
+            }
+            break;
+        case UNDO:                 /* Reverse the SET action and free resources */
+            break;
+        case COMMIT:
+            snmp_save_persistent( netsnmp_ds_get_string( NETSNMP_DS_LIBRARY_ID, NETSNMP_DS_LIB_APPTYPE ) );
+            (void) snmp_call_callbacks( SNMP_CALLBACK_LIBRARY, SNMP_CALLBACK_STORE_DATA, NULL );
+            snmp_clean_persistent( netsnmp_ds_get_string( NETSNMP_DS_LIBRARY_ID, NETSNMP_DS_LIB_APPTYPE ) );
+            break;
+        case FREE:                 /* Free any resources allocated */
+            break;
+    }
+    return SNMP_ERR_NOERROR;
+}
diff -urN net-snmp-5.4.4-org/agent/mibgroup/kwnmib.h net-snmp-5.4.4-mod/agent/mibgroup/kwnmib.h
--- net-snmp-5.4.4-org/agent/mibgroup/kwnmib.h	1970-01-01 05:30:00.000000000 +0530
+++ net-snmp-5.4.4-mod/agent/mibgroup/kwnmib.h	2018-09-25 19:18:55.548711567 +0530
@@ -0,0 +1,277 @@
+/****************************************************************************
+*                                                                           *
+*  File Name:           kwnmib.h                                      *
+*  Used By:                                                                 *
+*                                                                           *
+*  Operating System:                                                        *
+*  Purpose:                                                                 *
+*                                                                           *
+*  Comments:                                                                *
+*                                                                           *
+*  Author:              Srilatha                                            *
+*                                                                           *
+*                                                                           *
+****************************************************************************/
+#ifndef _MIBGROUP_KWNMIB_H
+#define _MIBGROUP_KWNMIB_H
+
+/****************************************************************************
+*                               Includes                                    *
+****************************************************************************/
+
+config_require(util_funcs)
+
+/* Macros */
+#define KWN_PRIVATE_MIB_OID              52619
+#define KWN_UCI_CMD_OUTPUT_LEN_MAX       255 * 15
+#define KWN_MAC_ADDR_LEN                 6
+#define KWN_GPS_LEN                      32
+#define KWN_LINKS_MAX                    20
+#define KWN_UCI_STR_ENUM_LEN             10
+
+/* Function Prototypes */
+
+void   init_kwnmib ( void );
+FindVarMethod var_WlanTable;
+FindVarMethod var_NwkIPTable;
+FindVarMethod var_RadiusTable;
+FindVarMethod var_VlanTable;
+FindVarMethod var_EthernetTable;
+FindVarMethod var_DhcpTable;
+FindVarMethod var_SystemTable;
+FindVarMethod var_WirelessStatsTable;
+FindVarMethod var_EthernetStatsTable;
+FindVarMethod var_AssocTable;
+
+/* Enum Types */
+enum KWN_TYPE {
+    KWN_TYPE_INTEGER32 = 1,
+    KWN_TYPE_DISPLAY_STRING = 2,
+    KWN_TYPE_IP_ADDRESS = 3
+};
+
+enum KWN_MIB {
+    KWN_SMAC = 1
+};
+
+enum KWN_SMAC {
+    KWN_CONFIGURATION = 1,
+    KWN_MANAGEMENT = 2,
+    KWN_MONITOR = 3
+};
+
+enum KWN_CONFIGURATION {
+    KWN_WIRELESS = 1,
+    KWN_NETWORK = 2,
+    KWN_RADIUS = 3,
+    KWN_VLAN = 4,
+    KWN_ETHERNET = 5,
+    KWN_DHCP = 6,
+};
+
+enum KWN_WIRELESS {
+    KWN_WLANTABLE = 1
+};
+
+enum KWN_WLANTABLE {
+    KWN_WLANENTRY = 1
+};
+
+enum KWN_WLANENTRY {
+    KWN_WLAN_INDEX = 1,
+    KWN_WLAN_RADIOMODE = 2,
+    KWN_WLAN_SSID = 3,
+    KWN_WLAN_COUNTRY = 4,
+    KWN_WLAN_OPMODE = 5,
+    KWN_WLAN_SUPPORTED_BANDWIDTHS = 6,
+    KWN_WLAN_BANDWIDTH            = 7,
+    KWN_WLAN_SUPPORTED_CHANNELS = 8,
+    KWN_WLAN_CHANNEL = 9,
+    KWN_WLAN_SUPPORTED_RATES = 10,
+    KWN_WLAN_RATE = 11,
+    KWN_WLAN_TXPOWER = 12,
+    KWN_WLAN_AMSDU = 13,
+    KWN_WLAN_UPLINK_LIMIT = 14,
+    KWN_WLAN_DOWNLINK_LIMIT = 15,
+    KWN_WLAN_HIDE_ESSID = 16,
+    KWN_WLAN_CUSTOMER_NAME = 17,
+    KWN_WLAN_LINKID = 18,
+    KWN_WLAN_SECURITY_ENC = 19,
+    KWN_WLAN_SECURITY_KEY = 20,
+    KWN_WLAN_MACFILTER = 21,
+    KWN_WLAN_MACLIST = 22,
+    KWN_WLAN_DISTANCE = 23,
+    KWN_WLAN_SHORTGI = 24,
+    KWN_WLAN_TXCHAINMASK = 25,
+    KWN_WLAN_RXCHAINMASK = 26
+};
+
+enum KWN_NETWORK {
+    KWN_NWK_ADRSTYPE = 1,
+    KWN_NWK_IP = 2,
+    KWN_NWK_MASK = 3,
+    KWN_NWK_GATEWAY = 4,
+    KWN_NWK_DNS = 5
+};
+
+enum KWN_RADIUS {
+    KWN_RADIUS_STATUS = 1,
+    KWN_RADIUS_PRISERVER = 2,
+    KWN_RADIUS_PRIPORT = 3,
+    KWN_RADIUS_PRISECRET = 4,
+    KWN_RADIUS_SECSERVER = 5,
+    KWN_RADIUS_SECPORT = 6,
+    KWN_RADIUS_SECSECRET = 7,
+    KWN_RADIUS_REAUTHTIME = 8,
+    KWN_RADIUS_RETRYTIME = 9,
+    KWN_RADIUS_RETRYCOUNT = 10,
+    KWN_RADIUS_RETRYCOUNTPERIOD = 11
+};
+
+enum KWN_VLAN {
+    KWN_VLAN_STATUS = 1,
+    KWN_VLAN_MODE = 2,
+    KWN_VLAN_MGMTID = 3,
+    KWN_VLAN_ACCESSID = 4,
+    KWN_VLAN_TRUNKOPTION = 5,
+    KWN_VLAN_TRUNKID = 6,
+    KWN_VLAN_SVLAN = 7,
+    KWN_VLAN_SVLAN_ETHERTYPE = 8
+};
+
+enum KWN_ETHERNET {
+    KWN_ETHERNET_MODE = 1,
+    KWN_ETHERNET_INACTIVITY = 2
+};
+
+enum KWN_DHCP {
+    KWN_DHCP_SERVER = 1,
+    KWN_DHCP_START = 2,
+    KWN_DHCP_LIMIT = 3,
+    KWN_DHCP_LEASE_TIME = 4
+};
+
+enum KWN_MANAGEMENT {
+    KWN_SYSTEM = 1
+};
+
+enum KWN_SYSTEM {
+    KWN_SYS_APPLY = 1,
+    KWN_SYS_RESET = 2,
+    KWN_SYS_REBOOT = 3,
+    KWN_SYS_DYNAMIC_APPLY = 4
+};
+
+enum KWN_MONITOR {
+    KWN_WIRELESSSTATS = 1,
+    KWN_ETHERNETSTATS = 2,
+    KWN_ASSOCLIST = 3
+};
+
+enum KWN_WIRELESSSTATS {
+    KWN_WIRELESSSTATSENTRY = 1
+};
+
+enum KWN_WIRELESSSTATSENTRY {
+    KWN_WIRELESSSTATS_RADIO_INDEX = 1,
+    KWN_WIRELESSSTATS_REMOTEPARTNERS = 2
+};
+
+enum KWN_ETHERNETSTATS {
+    KWN_ETHSTATS_STATUS = 1,
+    KWN_ETHSTATS_SPEED = 2,
+    KWN_ETHSTATS_DUPLEX = 3
+};
+
+enum KWN_ASSOCLIST {
+    KWN_ASSOCENTRY = 1
+};
+
+enum KWN_ASSOCENTRY {
+    KWN_ASSOC_RADIO_INDEX = 1,
+    KWN_ASSOC_SEC_INDEX = 2,
+    KWN_ASSOC_MAC = 3,
+    KWN_ASSOC_IP = 4,
+    KWN_ASSOC_REMOTE_LAT = 5,
+    KWN_ASSOC_REMOTE_LONG = 6,
+    KWN_ASSOC_LOCAL_LAT = 7,
+    KWN_ASSOC_LOCAL_LONG = 8,
+    KWN_ASSOC_RX_RATE = 9,
+    KWN_ASSOC_TX_RATE = 10,
+    KWN_ASSOC_RX_TPUT = 11,
+    KWN_ASSOC_TX_TPUT = 12,
+    KWN_ASSOC_LOCAL_SNR_A1 = 13,
+    KWN_ASSOC_LOCAL_SNR_A2 = 14,
+    KWN_ASSOC_REMOTE_SNR_A1 = 15,
+    KWN_ASSOC_REMOTE_SNR_A2 = 16,
+    KWN_ASSOC_LOCAL_PHY_ERR = 17,
+    KWN_ASSOC_REMOTE_PHY_ERR = 18,
+    KWN_ASSOC_LOCAL_MPDU_ERR = 19,
+    KWN_ASSOC_REMOTE_MPDU_ERR = 20,
+    KWN_ASSOC_LOCAL_RETRIES = 21,
+    KWN_ASSOC_REMOTE_RETRIES = 22,
+    KWN_ASSOC_LINKTEST_DUR = 23,
+    KWN_ASSOC_LINKTEST_DIR = 24,
+    KWN_ASSOC_LINKTEST_START_STOP = 25,
+    KWN_ASSOC_LOCAL_NOISE_FLOOR = 26,
+    KWN_ASSOC_REMOTE_NOISE_FLOOR = 27
+};
+
+/* Structure Definitions */
+typedef struct
+{
+    uint8_t  mac[ KWN_MAC_ADDR_LEN ];
+    uint32_t ip;
+    char  r_latitude[ KWN_GPS_LEN ];
+    char  r_longitude[ KWN_GPS_LEN ];
+    char  l_latitude[ KWN_GPS_LEN ];
+    char  l_longitude[ KWN_GPS_LEN ];
+    long tx_rate;
+    long rx_rate;
+    long tx_tput;
+    long rx_tput;
+    long local_snr_a1;
+    long local_snr_a2;
+    long remote_snr_a1;
+    long remote_snr_a2;
+    long local_phy_err;
+    long remote_phy_err;
+    long local_mpdu_err;
+    long remote_mpdu_err;
+    long local_retries;
+    long remote_retries;
+    long local_noise_floor;
+    long remote_noise_floor;
+}kwn_link_stats;
+
+typedef struct
+{
+    int no_of_links;
+    kwn_link_stats sta[ KWN_LINKS_MAX ];
+}kwn_wireless_stats;
+
+typedef struct
+{
+    long value;
+    char str[KWN_UCI_STR_ENUM_LEN];
+}kwn_array;
+
+typedef struct
+{
+    int len;
+    kwn_array array[KWN_UCI_STR_ENUM_LEN];
+}kwn_snmp_array;
+
+typedef struct 
+{
+    uint8_t channel;
+    uint32_t mhz;
+}kwn_arraylist;
+
+typedef struct
+{
+    long num_chans;
+    kwn_arraylist array[ 255 ];
+}kwn_freqlist;
+
+#endif /* _MIBGROUP_KWNMIB_H */
diff -urN net-snmp-5.4.4-org/mibs/KWN-SMAC-MIB.mib net-snmp-5.4.4-mod/mibs/KWN-SMAC-MIB.mib
--- net-snmp-5.4.4-org/mibs/KWN-SMAC-MIB.mib	1970-01-01 05:30:00.000000000 +0530
+++ net-snmp-5.4.4-mod/mibs/KWN-SMAC-MIB.mib	2018-09-25 19:25:19.868473205 +0530
@@ -0,0 +1,1520 @@
+------------------------------------------------------------------------
+------------------------------------------------------------------------
+--
+-- Copyright (C) 2018 by KeyWest Networks. All rights reserved
+-- Enterprise MIB definition to manage SMAC3.0 product.
+--
+------------------------------------------------------------------------
+------------------------------------------------------------------------
+
+
+KWN-SMAC-MIB DEFINITIONS ::= BEGIN
+
+
+IMPORTS
+	MODULE-IDENTITY, OBJECT-IDENTITY,
+	NOTIFICATION-TYPE, OBJECT-TYPE,
+	Integer32, enterprises,
+	IpAddress 		
+		FROM SNMPv2-SMI
+
+	DisplayString, DateAndTime,
+	RowStatus
+		FROM SNMPv2-TC;
+		
+
+kwnMIB MODULE-IDENTITY
+	LAST-UPDATED "201809030000Z"
+	ORGANIZATION "KeyWest Networks."
+	CONTACT-INFO "www.keywestnetworks.com"
+	DESCRIPTION  "KeyWest Networks private enterprise MIB definition"
+	REVISION 	 "201809030000Z"
+	DESCRIPTION	 "First Release"
+::= { enterprises 52619 }
+
+
+kwnSmacMIB OBJECT-IDENTITY
+	STATUS      current
+	DESCRIPTION "Root Node for KeyWest Networks SMAC3.0 product."
+::= { kwnMIB 1}
+
+kwnConfiguration OBJECT-IDENTITY
+        STATUS      current
+        DESCRIPTION "Configuration"
+::= { kwnSmacMIB 1 }
+
+kwnManagement OBJECT-IDENTITY
+        STATUS      current
+        DESCRIPTION "Management"
+::= { kwnSmacMIB 2 }
+
+kwnMonitor OBJECT-IDENTITY
+        STATUS      current
+        DESCRIPTION "Monitor"
+::= { kwnSmacMIB 3 }
+
+------------------------------------------------------------------------
+------------------------------------------------------------------------
+kwnWireless OBJECT-IDENTITY
+        STATUS      current
+        DESCRIPTION "Wireless configuration"
+::= { kwnConfiguration 1 }
+
+
+kwnWirelessTable OBJECT-TYPE
+        SYNTAX SEQUENCE OF KwnWirelessEntry
+        MAX-ACCESS         not-accessible
+        STATUS             current
+        DESCRIPTION        "This table is used to specify Wireless
+                            Configuration."
+::= { kwnWireless 1 }
+
+
+kwnWirelessEntry OBJECT-TYPE
+        SYNTAX      KwnWirelessEntry
+        MAX-ACCESS  not-accessible
+        STATUS      current
+        DESCRIPTION "This parameter represents an entry in the 
+                     Wireless Configuration table."
+        INDEX       { kwnWirelessIndex }
+::= { kwnWirelessTable 1 }
+
+
+KwnWirelessEntry ::=
+        SEQUENCE {
+                kwnWirelessIndex    
+                    Integer32,
+                kwnWirelessRadioMode 
+                    INTEGER,
+                kwnWirelessSSID 
+                    DisplayString,
+                kwnWirelessCountry
+                    INTEGER,
+                kwnWirelessOpmode
+                    INTEGER,
+                kwnWirelessSupportedBandwidths
+                    DisplayString,
+                kwnWirelessBandwidth
+                    INTEGER,
+                kwnWirelessSupportedChannels
+                    DisplayString,
+                kwnWirelessChannel
+                    Integer32,
+                kwnWirelessSupportedRates
+                    DisplayString,
+                kwnWirelessRate
+                    Integer32,
+                kwnWirelessTxPower 
+                    Integer32,
+                kwnWirelessAMSDU 
+                    INTEGER,
+                kwnWirelessUplinkLimit
+                    Integer32,
+                kwnWirelessDownlinkLimit
+                    Integer32,
+                kwnWirelessHideESSID
+                    INTEGER,
+                kwnWirelessCustomerName
+                    DisplayString,
+                kwnWirelessLinkId
+                    Integer32,
+                kwnWirelessSecurityEncryption
+                    INTEGER,
+                kwnWirelessSecurityKey
+                    DisplayString,
+                kwnWirelessMACFilter
+                    INTEGER,
+                kwnWirelessMACList
+                    DisplayString,
+                kwnWirelessDistance
+                    Integer32,
+                kwnWirelessShortGI
+                    INTEGER,
+                kwnWirelessTxChainmask
+                    Integer32,
+                kwnWirelessRxChainmask
+                    Integer32
+        }
+
+
+kwnWirelessIndex OBJECT-TYPE
+        SYNTAX      Integer32 (1..2)
+        MAX-ACCESS  not-accessible
+        STATUS      current
+        DESCRIPTION "This parameter represents the Radio Index 
+                     for Wireless Configuration table
+                     For 2.4 GHz radio - '1'
+                     For   5 GHz radio - '2'."
+::= { kwnWirelessEntry 1 }
+
+
+kwnWirelessRadioMode OBJECT-TYPE
+        SYNTAX      INTEGER {
+            outdoorbase       (1),
+            outdoorsubscriber (2),
+            accesspoint       (3),
+            client            (4)
+        }
+        MAX-ACCESS  read-write
+        STATUS      current
+        DESCRIPTION "This parameter represents Wireless Radio Mode.
+                     It can be configured as
+                     For 2.4 GHz radio - '3' - Access Point
+                                         '4' - Client
+                     For   5 GHz radio - '1' - Outdoor Base
+                                         '2' - Outdoor Subscriber."
+::= { kwnWirelessEntry 2 }
+
+
+kwnWirelessSSID OBJECT-TYPE
+        SYNTAX      DisplayString
+        MAX-ACCESS  read-write
+        STATUS      current
+        DESCRIPTION "This parameter is used to configure SSID."
+::= { kwnWirelessEntry 3 }
+
+kwnWirelessCountry OBJECT-TYPE
+        SYNTAX      INTEGER {
+            russia   (1),
+            indiaul  (2),
+            indial   (3),
+            russia24 (4)
+        }
+        MAX-ACCESS  read-write
+        STATUS      current
+        DESCRIPTION "This parameter represents the Country.
+                     It can be configured as
+                     For 2.4 GHz radio - '4' - RUSSIA_24
+                     For   5 GHz radio - '1' - RUSSIA
+                                         '2' - INDIA_UL
+                                         '3' - INDIA_L."
+::= { kwnWirelessEntry 4 }
+
+kwnWirelessOpmode OBJECT-TYPE
+        SYNTAX      INTEGER {
+            dot11g  (1),
+            dot11ng (2),
+            dot11a  (3),
+            dot11na (4),
+            dot11ac (5)
+        }
+        MAX-ACCESS  read-write
+        STATUS      current
+        DESCRIPTION "This parameter represents the Operational Mode.
+                     It can be configured as
+                     For 2.4 GHz radio - '1' - Legacy (11G)
+                                         '2' - 11NG
+                     For   5 GHz radio - '3' - Legacy (11A)
+                                         '4' - 11NA
+                                         '5' - 11AC."
+::= { kwnWirelessEntry 5 }
+
+kwnWirelessSupportedBandwidths OBJECT-TYPE
+        SYNTAX      DisplayString
+        MAX-ACCESS  read-only
+        STATUS      current
+        DESCRIPTION "This parameter represents the supported 
+                     Bandwidths."
+::= { kwnWirelessEntry 6 }
+
+kwnWirelessBandwidth OBJECT-TYPE
+        SYNTAX      INTEGER {
+            bw20MHz (1),
+            bw40MHz (2),
+            bw80MHz (3)
+        }
+        MAX-ACCESS  read-write
+        STATUS      current
+        DESCRIPTION "This parameter represents the bandwidth.
+                     It can be configured as
+                     For 2.4 GHz - '1' - 20 MHz
+                                   '2' - 40 MHz
+                     For   5 GHz - '1' - 20 MHz
+                                   '2' - 40 MHz
+                                   '3' - 80 MHz."
+::= { kwnWirelessEntry 7 }
+
+kwnWirelessSupportedChannels OBJECT-TYPE
+        SYNTAX      DisplayString
+        MAX-ACCESS  read-only
+        STATUS      current
+        DESCRIPTION "This parameter represents the supported 
+                     channel list."
+::= { kwnWirelessEntry 8 }
+
+kwnWirelessChannel OBJECT-TYPE
+        SYNTAX      Integer32
+        MAX-ACCESS  read-write
+        STATUS      current
+        DESCRIPTION "This parameter represents the channel.
+                     It can be configured as auto (-1) or any other
+                     channel from the supported channel list based on
+                     country selected."
+::= { kwnWirelessEntry 9 }
+
+kwnWirelessSupportedRates OBJECT-TYPE
+        SYNTAX      DisplayString
+        MAX-ACCESS  read-only
+        STATUS      current
+        DESCRIPTION "This parameter represents the supported 
+                     Modulation Rates."
+::= { kwnWirelessEntry 10 }
+
+kwnWirelessRate OBJECT-TYPE
+        SYNTAX      Integer32
+        MAX-ACCESS  read-write
+        STATUS      current
+        DESCRIPTION "This parameter represents the Modulation Rates.
+                     It can be  configured as
+                     For 2.4 GHz radio - NA
+                     For   5 GHz radio - MCS 0 - MCS  7 for Legacy (11A)
+                                         MCS 0 - MCS 15 for 11NA
+                                         MCS 0 - MCS 19 for 11AC."
+::= { kwnWirelessEntry 11 }
+
+kwnWirelessTxPower OBJECT-TYPE
+        SYNTAX      Integer32
+        MAX-ACCESS  read-write
+        STATUS      current
+        DESCRIPTION "This parameter represents the Transmission
+                     power. It can be configured as 
+                     For 2.4 GHz radio - ( 1 - 26 ) dBm
+                     For   5 GHz radio - ( 1 - 26 ) dBm."
+::= { kwnWirelessEntry 12 }
+
+kwnWirelessAMSDU OBJECT-TYPE
+        SYNTAX      INTEGER {
+            enable  (1),
+            disable (2)
+        }
+        MAX-ACCESS  read-write
+        STATUS      current
+        DESCRIPTION "This parameter represents the AMSDU.
+                     It can be configured as
+                     For 2.4 GHz - NA
+                     For   5 GHz - '1' - Enable
+                                   '2' - Disable."
+::= { kwnWirelessEntry 13 }
+
+kwnWirelessUplinkLimit OBJECT-TYPE
+        SYNTAX      Integer32
+        MAX-ACCESS  read-write
+        STATUS      current
+        DESCRIPTION "This parameter represents the Uplink Limit.
+                     It can be configured as
+                     For 2.4 GHz - NA
+                     For   5 GHz - ( 1024 - 887000 ) Kbps."
+::= { kwnWirelessEntry 14 }
+
+kwnWirelessDownlinkLimit OBJECT-TYPE
+        SYNTAX      Integer32
+        MAX-ACCESS  read-write
+        STATUS      current
+        DESCRIPTION "This parameter represents the Downlink Limit.
+                     It can be configured as
+                     For 2.4 GHz - NA
+                     For   5 GHz - ( 1024 - 887000 ) Kbps."
+::= { kwnWirelessEntry 15 }
+
+kwnWirelessHideESSID OBJECT-TYPE
+        SYNTAX      INTEGER {
+            disable (0),
+            enable  (1)
+        }
+        MAX-ACCESS  read-write
+        STATUS      current
+        DESCRIPTION "This parameter represents the HideESSID.
+                     It can be configured as
+                     For 2.4 / 5 GHz - 0 - uncheck (disable)
+                                       1 - check   (enable)."
+::= { kwnWirelessEntry 16 }
+
+kwnWirelessCustomerName OBJECT-TYPE
+        SYNTAX      DisplayString
+        MAX-ACCESS  read-write
+        STATUS      current
+        DESCRIPTION "This parameter represents CustomerName.
+                     It is configured only for 5 GHz radio."
+::= { kwnWirelessEntry 17 }
+
+kwnWirelessLinkId OBJECT-TYPE
+        SYNTAX      Integer32
+        MAX-ACCESS  read-write
+        STATUS      current
+        DESCRIPTION "This parameter represents LinkId.
+                     It can be configured only for 5 GHz radio
+                     in Outdoor Subscriber mode."
+::= { kwnWirelessEntry 18 }
+
+kwnWirelessSecurityEncryption OBJECT-TYPE
+        SYNTAX      INTEGER {
+            none     (1),
+            wpa2-psk (2)
+        }
+        MAX-ACCESS  read-write
+        STATUS      current
+        DESCRIPTION "This parameter represents the Encryption
+                     type. It can be cofigured as
+                     For 2.4 / 5 GHz - '1' - None
+                                       '2' - WPA2/PSK."
+::= { kwnWirelessEntry 19 }
+
+kwnWirelessSecurityKey OBJECT-TYPE
+        SYNTAX      DisplayString
+        MAX-ACCESS  read-write
+        STATUS      current
+        DESCRIPTION "This parameter is used to configure the
+                     Security Key."
+::= { kwnWirelessEntry 20 }
+
+kwnWirelessMACFilter OBJECT-TYPE
+        SYNTAX      INTEGER {
+            disable (1),
+            allow   (2),
+            deny    (3)
+        }
+        MAX-ACCESS  read-write
+        STATUS      current
+        DESCRIPTION "This parameter represents the MAC Filter.
+                     It can be configured as
+                     For 2.4 / 5 GHz - '1' - Disable
+                                       '2' - Allow
+                                       '3' - Deny."
+::= { kwnWirelessEntry 21 }
+
+kwnWirelessMACList OBJECT-TYPE
+        SYNTAX      DisplayString
+        MAX-ACCESS  read-write
+        STATUS      current
+        DESCRIPTION "This parameter represents the MAC List.
+                     It can be configured as
+                     For 2.4 / 5 GHz - mac '<mac address>'."
+::= { kwnWirelessEntry 22 }
+
+kwnWirelessDistance OBJECT-TYPE
+        SYNTAX      Integer32
+        MAX-ACCESS  read-write
+        STATUS      current
+        DESCRIPTION "This parameter is used to configure the
+                     Distance."
+::= { kwnWirelessEntry 23 }
+
+kwnWirelessShortGI OBJECT-TYPE
+        SYNTAX      INTEGER {
+            disable (0),
+            enable  (1)
+        }
+        MAX-ACCESS  read-write
+        STATUS      current
+        DESCRIPTION "This parameter represents the short Guard
+                     Interval.It is configured only for 5 GHz 
+                     radio as '0' - Disable
+                              '1' - Enable."
+::= { kwnWirelessEntry 24 }
+
+kwnWirelessTxChainmask OBJECT-TYPE
+        SYNTAX      Integer32
+        MAX-ACCESS  read-write
+        STATUS      current
+        DESCRIPTION "This parameter is used to configure the 
+                     Tx Chainmask."
+::= { kwnWirelessEntry 25 }
+
+kwnWirelessRxChainmask OBJECT-TYPE
+        SYNTAX      Integer32
+        MAX-ACCESS  read-write
+        STATUS      current
+        DESCRIPTION "This parameter is used to configure the 
+                     Rx Chainmask."
+::= { kwnWirelessEntry 26 }
+
+
+------------------------------------------------------------------------
+------------------------------------------------------------------------
+kwnNetwork OBJECT-IDENTITY
+        STATUS      current
+        DESCRIPTION "Network Parameters"
+::= { kwnConfiguration 2 }
+
+
+kwnNetworkAddressType OBJECT-TYPE
+        SYNTAX      INTEGER {
+            static  (1),
+            dynamic (2)
+        }
+        MAX-ACCESS  read-write
+        STATUS      current
+        DESCRIPTION "This parameter represents the Address Type.
+                     It can be configured as 
+                     '1' - Static
+                     '2' - Dynamic."
+        DEFVAL      { static }
+::= { kwnNetwork 1 }
+
+kwnNetworkIPAddress OBJECT-TYPE
+        SYNTAX      IpAddress
+        MAX-ACCESS  read-write
+        STATUS      current
+        DESCRIPTION "This parameter is used to configure the
+                     IP Address. Default value 192.168.1.1."
+::= { kwnNetwork 2 }
+
+kwnNetworkNetMask OBJECT-TYPE
+        SYNTAX      IpAddress
+        MAX-ACCESS  read-write
+        STATUS      current
+        DESCRIPTION "This parameter is used to configure the 
+                     Subnet Mask. Default value 255.255.255.0"
+::= { kwnNetwork 3 }
+
+kwnNetworkGateway OBJECT-TYPE
+        SYNTAX      IpAddress
+        MAX-ACCESS  read-write
+        STATUS      current
+        DESCRIPTION "This parameter is used to configure the
+                     Gateway IP Addres. Default value 192.168.1.1."
+::= { kwnNetwork 4 }
+
+kwnNetworkDNSIP OBJECT-TYPE
+        SYNTAX      IpAddress
+        MAX-ACCESS  read-write
+        STATUS      current
+        DESCRIPTION "This parameter is used to configure the 
+                     DNS Server IP Address."
+::= { kwnNetwork 5 }
+
+
+------------------------------------------------------------------------
+------------------------------------------------------------------------
+kwnRadius OBJECT-IDENTITY
+        STATUS      current
+        DESCRIPTION "RADIUS Parameters."
+::= { kwnConfiguration 3 }
+
+kwnRadiusStatus OBJECT-TYPE
+        SYNTAX      INTEGER {
+            disable (0),
+            enable  (1)
+        }
+        MAX-ACCESS  read-write
+        STATUS      current
+        DESCRIPTION "This parameter represents the Radius Server
+                     Status. It can be configured as
+                     '0' - Disable
+                     '1' - Enable"
+        DEFVAL      { disable }
+::= { kwnRadius 1 }
+
+kwnRadiusPrimaryServer OBJECT-TYPE
+        SYNTAX      IpAddress
+        MAX-ACCESS  read-write
+        STATUS      current
+        DESCRIPTION "This parameter is used to configure the Radius
+                     Primary Server IP Address. Default value is 
+                     192.168.1.100."
+::= { kwnRadius 2 }
+
+kwnRadiusPrimaryPort OBJECT-TYPE
+        SYNTAX      Integer32
+        MAX-ACCESS  read-write
+        STATUS      current
+        DESCRIPTION "This parameter is used to configure the Radius
+                     Primary Port. Default value is 1812."
+::= { kwnRadius 3 }
+
+kwnRadiusPrimarySecret OBJECT-TYPE
+        SYNTAX      DisplayString
+        MAX-ACCESS  read-write
+        STATUS      current
+        DESCRIPTION "This parameter is used to configure the Radius
+                     Primary Secret."
+        DEFVAL      { "public" }
+::= { kwnRadius 4 }
+
+kwnRadiusSecondaryServer OBJECT-TYPE
+        SYNTAX      IpAddress
+        MAX-ACCESS  read-write
+        STATUS      current
+        DESCRIPTION "This parameter is used to configure the Radius
+                     Secondary Server IP Address. Default value is
+                     192.168.1.100."
+::= { kwnRadius 5 }
+
+kwnRadiusSecondaryPort OBJECT-TYPE
+        SYNTAX      Integer32
+        MAX-ACCESS  read-write
+        STATUS      current
+        DESCRIPTION "This parameter is used to configure the Radius
+                     Secondary Port. Default value is 1812."
+::= { kwnRadius 6 }
+
+kwnRadiusSecondarySecret OBJECT-TYPE
+        SYNTAX      DisplayString
+        MAX-ACCESS  read-write
+        STATUS      current
+        DESCRIPTION "This parameter is used to configure the Radius
+                     Secondary Secret."
+        DEFVAL      { "public" }
+::= { kwnRadius 7 }
+kwnRadiusAuthenticationTime OBJECT-TYPE
+        SYNTAX      Integer32
+        MAX-ACCESS  read-write
+        STATUS      current
+        DESCRIPTION "This parameter is used to configure the Radius
+                     ReAuthentication Time in seconds. Default value
+                     is 21600."
+::= { kwnRadius 8 }
+
+kwnRadiusRetryTime OBJECT-TYPE
+        SYNTAX      Integer32
+        MAX-ACCESS  read-write
+        STATUS      current
+        DESCRIPTION "This parameter is used to configure the Radius
+                     Retry Time in seconds. Default value is 300."
+::= { kwnRadius 9 }
+
+kwnRadiusRetryCount OBJECT-TYPE
+        SYNTAX      Integer32
+        MAX-ACCESS  read-write
+        STATUS      current
+        DESCRIPTION "This parameter is used to configure the Radius
+                     Retry Count. Default value is 3."
+::= { kwnRadius 10 }
+
+kwnRadiusRetryCountPeriod OBJECT-TYPE
+        SYNTAX      Integer32
+        MAX-ACCESS  read-write
+        STATUS      current
+        DESCRIPTION "This parameter is used to configure the Radius
+                     Retry Count Period in seconds. Default value is 
+                     3."
+::= { kwnRadius 11 }
+
+------------------------------------------------------------------------
+------------------------------------------------------------------------
+kwnVlan OBJECT-IDENTITY
+        STATUS      current
+        DESCRIPTION "VLAN Parameters"
+::= { kwnConfiguration 4 }
+
+kwnVlanStatus OBJECT-TYPE
+        SYNTAX      INTEGER {
+            enable  (1),
+            disable (2)
+        }
+        MAX-ACCESS  read-write
+        STATUS      current
+        DESCRIPTION "This parameter represents VLAN status.
+                     It can be configured as 
+                     '1' - Enable
+                     '2' - Disable."
+        DEFVAL      { disable }
+::= { kwnVlan 1 }
+
+kwnVlanMode OBJECT-TYPE
+        SYNTAX      INTEGER {
+            transparent (0),
+            access      (1),
+            trunk       (2),
+            q-in-q      (3),
+            mac-in-mac  (4)
+        }
+        MAX-ACCESS  read-write
+        STATUS      current
+        DESCRIPTION "This parameter represents VLAN mode.
+                     It can be configured as 
+                           Outdoor Base - '0' - Transparent
+                     Outdoor Subscriber - '0' - Transparent
+                                          '1' - Access
+                                          '2' - Trunk
+                                          '3' - Q-in-Q
+                                          '4' - MAC-in-MAC."
+        DEFVAL      { transparent }
+::= { kwnVlan 2 }
+
+kwnVlanMgmtId OBJECT-TYPE
+        SYNTAX      Integer32
+        MAX-ACCESS  read-write
+        STATUS      current
+        DESCRIPTION "This parameter is used to configure
+                     the Managment VLAN ID. Default value
+                     is 1."
+::= { kwnVlan 3 }
+
+kwnVlanAccessId OBJECT-TYPE
+        SYNTAX      Integer32
+        MAX-ACCESS  read-write
+        STATUS      current
+        DESCRIPTION "This parameter is used to configure
+                     the Access VLAN ID. Default value
+                     is -1."
+::= { kwnVlan 4 }
+
+kwnVlanTrunkOption OBJECT-TYPE
+        SYNTAX      INTEGER {
+            list (1),
+            all  (2)
+        }
+        MAX-ACCESS  read-write
+        STATUS      current
+        DESCRIPTION "This parameter represents the VLAN 
+                     Trunk option. It can be configured as
+                     '1' - List
+                     '2' - All."
+        DEFVAL      { all }
+::= { kwnVlan 5 }
+
+kwnVlanTrunkId OBJECT-TYPE
+        SYNTAX      DisplayString
+        MAX-ACCESS  read-write
+        STATUS      current
+        DESCRIPTION "This parameter is used to configure 
+                     the Trunk VLAN ID."
+::= { kwnVlan 6 }
+
+kwnVlanSvlanId OBJECT-TYPE
+        SYNTAX      Integer32
+        MAX-ACCESS  read-write
+        STATUS      current
+        DESCRIPTION "This parameter is used to configure 
+                     the SVLAN ID. Default value is -1."
+::= { kwnVlan 7 }
+
+kwnVlanSVlanEtherType OBJECT-TYPE
+        SYNTAX      INTEGER {
+            x8100 (1),
+            x88a8 (2),
+            x9100 (3),
+            x9200 (4)
+        }
+        MAX-ACCESS  read-write
+        STATUS      current
+        DESCRIPTION "This parameter represents the 
+                     SVLAN Ether Type. It can be configured as
+                     '1' - 0x8100
+                     '2' - 0x88a8
+                     '3' - 0x9100
+                     '4' - 0x9200.
+                     Default value is 0x8100."
+::= { kwnVlan 8 }
+
+kwnVlanBackboneDestinationMAC OBJECT-TYPE
+SYNTAX      DisplayString
+MAX-ACCESS  read-write
+STATUS      current
+DESCRIPTION "This parameter is used to configure the
+             Backbone Destination MAC Address. 
+             Default value is 00:00:00:00:00:00."
+::= { kwnVlan 9 }
+
+kwnVlanBackboneSourceMAC OBJECT-TYPE
+SYNTAX      DisplayString
+MAX-ACCESS  read-write
+STATUS      current
+DESCRIPTION "This parameter is used to configure the
+             Backbone Source MAC Address.
+             Default value is 00:00:00:00:00:00."
+::= { kwnVlan 10 }
+
+kwnVlanBackboneVLANID OBJECT-TYPE
+SYNTAX      Integer32
+MAX-ACCESS  read-write
+STATUS      current
+DESCRIPTION "This parameter is used to configure 
+             the Backbone VLANID. Defult value 
+             is -1."
+::= { kwnVlan 11 }
+
+kwnVlanBackboneServiceInstanceVLANID OBJECT-TYPE
+SYNTAX      Integer32
+MAX-ACCESS  read-write
+STATUS      current
+DESCRIPTION "This parameter is used to configure 
+             the Backbone Service Instance VLANID.
+             Default value is -1."
+::= { kwnVlan 12 }
+
+------------------------------------------------------------------------
+------------------------------------------------------------------------
+kwnEthernet OBJECT-IDENTITY
+        STATUS      current
+        DESCRIPTION "Ethernet Parameters."
+::= { kwnConfiguration 5 }
+
+kwnEthernetMode OBJECT-TYPE
+        SYNTAX      INTEGER {
+            autoNegotation (0),
+            half10Mbps     (1),
+            full10Mbps     (2),
+            half100Mbps    (3),
+            full100Mbps    (4),
+            full1000Mbps   (5)
+        }
+        MAX-ACCESS  read-write
+        STATUS      current
+        DESCRIPTION "This parameter represents the Ethernet 
+                     Mode and Speed. It can be configured as
+                     '0' - Auto Negotiation,
+                     '1' - 10Mbps-Half,
+                     '2' - 10Mbps-Full,
+                     '3' - 100Mbps-Half,
+                     '4' - 100Mbps-Full,
+                     '5' - 1000Mbps-Full."
+        DEFVAL      { autoNegotation }
+::= { kwnEthernet 1 }
+
+kwnEthernetInactivity OBJECT-TYPE
+        SYNTAX      Integer32
+        MAX-ACCESS  read-write
+        STATUS      current
+        DESCRIPTION "This parameter is used to Configuration 
+                     the Ethernet Inactivity in minutes. 
+                     Default value is 0"
+::= { kwnEthernet 2 }
+
+------------------------------------------------------------------------
+------------------------------------------------------------------------
+kwnDhcp OBJECT-IDENTITY
+        STATUS current
+        DESCRIPTION "DHCP Parameters"
+::= { kwnConfiguration 6 }
+
+kwnDhcpServer OBJECT-TYPE
+        SYNTAX      INTEGER {
+            disable (0),
+            enable  (1)
+        }
+        MAX-ACCESS  read-write
+        STATUS      current
+        DESCRIPTION "This parameter represents the DHCP Server
+                     Status. It can be configured as 
+                     '0' - Disable
+                     '1' - Enable."
+        DEFVAL      { disable }
+::= { kwnDhcp 1 }
+
+kwnDhcpStart OBJECT-TYPE
+        SYNTAX      Integer32
+        MAX-ACCESS  read-write
+        STATUS      current
+        DESCRIPTION "This parameter is used to configure DHCP
+                     Server Start Range. Defualt value is 100."
+::= { kwnDhcp 2 }
+
+kwnDhcpLimit OBJECT-TYPE
+        SYNTAX      Integer32
+        MAX-ACCESS  read-write
+        STATUS      current
+        DESCRIPTION "This parameter is used to configure DHCP
+                     Server End Limit Range. Default value is 
+                     150."
+::= { kwnDhcp 3 }
+
+kwnDhcpLeaseTime OBJECT-TYPE
+        SYNTAX      Integer32
+        MAX-ACCESS  read-write
+        STATUS      current
+        DESCRIPTION "This parameter is used to configure DHCP 
+                     Server Lease Time. Default value is 12h."
+::= { kwnDhcp 4 }
+
+
+------------------------------------------------------------------------
+------------------------------------------------------------------------
+kwnSystem OBJECT-IDENTITY
+        STATUS current
+        DESCRIPTION "Management Parameters"
+::= { kwnManagement 1 }
+
+kwnApply OBJECT-TYPE
+        SYNTAX      INTEGER {
+            yes (1),
+            no  (2)
+        }
+        MAX-ACCESS  read-write
+        STATUS      current
+        DESCRIPTION "This parameter is used to Apply 
+                     changed configuration."
+::= { kwnSystem 1 }
+
+kwnReset OBJECT-TYPE
+        SYNTAX      INTEGER {
+            yes (1),
+            no  (2)
+        }
+        MAX-ACCESS  read-write
+        STATUS      current
+        DESCRIPTION "This parameter is used to restore
+                     default configuration."
+::= { kwnSystem 2 }
+
+kwnReboot OBJECT-TYPE
+        SYNTAX      INTEGER {
+            yes (1),
+            no  (2)
+        }
+        MAX-ACCESS  read-write
+        STATUS      current
+        DESCRIPTION "This parameter is used to Reboot
+                     the device."
+::= { kwnSystem 3 }
+
+kwnDynamicUpdate OBJECT-TYPE
+        SYNTAX      INTEGER {
+            yes (1),
+            no  (2)
+        }
+        MAX-ACCESS  read-write
+        STATUS      current
+        DESCRIPTION "This parameter is used to apply
+                     Dynamic Configuration."
+::= { kwnSystem 4 }
+
+
+------------------------------------------------------------------------
+------------------------------------------------------------------------
+
+kwnWirelessStatsTable OBJECT-TYPE
+        SYNTAX SEQUENCE OF KwnWirelessStatsEntry
+        MAX-ACCESS         not-accessible
+        STATUS             current
+        DESCRIPTION        "This table is used to specify 
+                            Wireless Statistics."
+::= { kwnMonitor 1 }
+
+
+kwnWirelessStatsEntry OBJECT-TYPE
+        SYNTAX      KwnWirelessStatsEntry
+        MAX-ACCESS  not-accessible
+        STATUS      current
+        DESCRIPTION "This parameter represents an entry in the 
+                     Wireless Statistics Table."
+        INDEX       { kwnWirelessStatsRadioIndex }
+::= { kwnWirelessStatsTable 1 }
+
+
+KwnWirelessStatsEntry ::=
+        SEQUENCE {
+                kwnWirelessStatsRadioIndex 
+                    Integer32,
+                kwnWirelessStatsRemotePartners 
+                    Integer32,
+                kwnWirelessStatsDataTXTotalPackets
+                    Integer32,
+                kwnWirelessStatsDataRXTotalPackets
+                    Integer32,
+                kwnWirelessStatsDataTXMulticastPackets
+                    Integer32,
+                kwnWirelessStatsDataRXMulticastPackets
+                    Integer32,
+                kwnWirelessStatsDataTXUnicastPackets
+                    Integer32,
+                kwnWirelessStatsDataRXUnicastPackets
+                    Integer32,
+                kwnWirelessStatsMgmtTXPackets
+                    Integer32,
+                kwnWirelessStatsMgmtRXPackets
+                    Integer32,
+                kwnWirelessStatsMgmtTXBeacons
+                    Integer32,
+                kwnWirelessStatsMgmtRXBeacons
+                    Integer32,
+                kwnWirelessStatsMgmtAuthReqSent
+                    Integer32,
+                kwnWirelessStatsMgmtAuthReqRecv
+                    Integer32,
+                kwnWirelessStatsMgmtAuthConfirm
+                    Integer32,
+                kwnWirelessStatsMgmtAuthReject
+                    Integer32,
+                kwnWirelessStatsMgmtDeAuthReqSent
+                    Integer32,
+                kwnWirelessStatsMgmtDeAuthReqRecv
+                    Integer32,
+                kwnWirelessStatsMgmtAuthResultLast
+                    DisplayString,
+                kwnWirelessStatsMgmtAssocReqSent
+                    Integer32,
+                kwnWirelessStatsMgmtAssocReqRecv
+                    Integer32,
+                kwnWirelessStatsMgmtAssocConfirm
+                    Integer32,
+                kwnWirelessStatsMgmtAssocReject
+                    Integer32,
+                kwnWirelessStatsMgmtDeAssocReqSent
+                    Integer32,
+                kwnWirelessStatsMgmtDeAssocReqRecv
+                    Integer32,
+                kwnWirelessStatsMgmtAssocResultLast
+                    DisplayString,
+                kwnWirelessStatsMPDUErrors
+                    Integer32,
+                kwnWirelessStatsPhyErrors
+                    Integer32
+        }
+
+kwnWirelessStatsRadioIndex OBJECT-TYPE
+        SYNTAX      Integer32 (1..2)
+        MAX-ACCESS  read-only
+        STATUS      current
+        DESCRIPTION "This parameter represents the index for the 
+                     wireless Statistics table."
+::= { kwnWirelessStatsEntry 1 }
+
+kwnWirelessStatsRemotePartners OBJECT-TYPE
+        SYNTAX      Integer32
+        MAX-ACCESS  read-only
+        STATUS      current
+        DESCRIPTION "This parameter represents the Remote Partners
+                     in Wireless Statistics."
+::= { kwnWirelessStatsEntry 2 }
+
+kwnWirelessStatsDataTXTotalPackets OBJECT-TYPE
+        SYNTAX      Integer32
+        MAX-ACCESS  read-only
+        STATUS      current
+        DESCRIPTION "This parameter represents the TX total packets
+                     in Wireless Statistics of type data."
+::= { kwnWirelessStatsEntry 3 }
+
+kwnWirelessStatsDataRXTotalPackets OBJECT-TYPE
+        SYNTAX      Integer32
+        MAX-ACCESS  read-only
+        STATUS      current
+        DESCRIPTION "This parameter represents the RX total packets
+                     in Wireless Statistics of type data."
+::= { kwnWirelessStatsEntry 4 }
+
+kwnWirelessStatsDataTXMulticastPackets OBJECT-TYPE
+        SYNTAX      Integer32
+        MAX-ACCESS  read-only
+        STATUS      current
+        DESCRIPTION "This parameter represents the TX Multicast
+                     packets in Wireless Statistics of type data."
+::= { kwnWirelessStatsEntry 5 }
+
+kwnWirelessStatsDataRXMulticastPackets OBJECT-TYPE
+        SYNTAX      Integer32
+        MAX-ACCESS  read-only
+        STATUS      current
+        DESCRIPTION "This parameter represents the RX Multicast
+                     packets in Wireless Statistics of type data."
+::= { kwnWirelessStatsEntry 6 }
+
+kwnWirelessStatsDataTXUnicastPackets OBJECT-TYPE
+        SYNTAX      Integer32
+        MAX-ACCESS  read-only
+        STATUS      current
+        DESCRIPTION "This parameter represents the TX Multicast
+                     packets in Wireless Statistics of type data."
+::= { kwnWirelessStatsEntry 7 }
+
+kwnWirelessStatsDataRXUnicastPackets OBJECT-TYPE
+        SYNTAX      Integer32
+        MAX-ACCESS  read-only
+        STATUS      current
+        DESCRIPTION "This parameter represents the RX Multicast
+                     packets in Wireless Statistics of type data."
+::= { kwnWirelessStatsEntry 8 }
+
+kwnWirelessStatsMgmtTXPackets OBJECT-TYPE
+        SYNTAX      Integer32
+        MAX-ACCESS  read-only
+        STATUS      current
+        DESCRIPTION "This parameter represents the TX packets
+                     in Wireless Statistics of type Managment."
+::= { kwnWirelessStatsEntry 9 }
+
+kwnWirelessStatsMgmtRXPackets OBJECT-TYPE
+        SYNTAX      Integer32
+        MAX-ACCESS  read-only
+        STATUS      current
+        DESCRIPTION "This parameter represents the RX packets
+                     in Wireless Statistics of type Managment."
+::= { kwnWirelessStatsEntry 10 }
+
+kwnWirelessStatsMgmtTXBeacons OBJECT-TYPE
+        SYNTAX      Integer32
+        MAX-ACCESS  read-only
+        STATUS      current
+        DESCRIPTION "This parameter represents the TX packets
+                     in Wireless Statistics of type Managment."
+::= { kwnWirelessStatsEntry 11 }
+
+kwnWirelessStatsMgmtRXBeacons OBJECT-TYPE
+        SYNTAX      Integer32
+        MAX-ACCESS  read-only
+        STATUS      current
+        DESCRIPTION "This parameter represents the RX packets
+                     in Wireless Statistics of type Managment."
+::= { kwnWirelessStatsEntry 12 }
+
+kwnWirelessStatsMgmtAuthReqSent OBJECT-TYPE
+        SYNTAX      Integer32
+        MAX-ACCESS  read-only
+        STATUS      current
+        DESCRIPTION "This parameter represents the Authentication
+                     request sent in Wireless Statistics of type 
+                     Managment."
+::= { kwnWirelessStatsEntry 13 }
+
+kwnWirelessStatsMgmtAuthReqRecv OBJECT-TYPE
+        SYNTAX      Integer32
+        MAX-ACCESS  read-only
+        STATUS      current
+        DESCRIPTION "This parameter represents the Authentication
+                     request received in Wireless Statistics of 
+                     type Managment."
+::= { kwnWirelessStatsEntry 14 }
+
+kwnWirelessStatsMgmtAuthConfirm OBJECT-TYPE
+        SYNTAX      Integer32
+        MAX-ACCESS  read-only
+        STATUS      current
+        DESCRIPTION "This parameter represents the Authentication
+                     confirm in Wireless Statistics of type 
+                     Managment."
+::= { kwnWirelessStatsEntry 15 }
+
+kwnWirelessStatsMgmtAuthReject OBJECT-TYPE
+        SYNTAX      Integer32
+        MAX-ACCESS  read-only
+        STATUS      current
+        DESCRIPTION "This parameter represents the Authentication
+                     reject in Wireless Statistics of 
+                     type Managment."
+::= { kwnWirelessStatsEntry 16 }
+
+kwnWirelessStatsMgmtDeAuthReqSent OBJECT-TYPE
+        SYNTAX      Integer32
+        MAX-ACCESS  read-only
+        STATUS      current
+        DESCRIPTION "This parameter represents the DeAuthentication
+                     request sent in Wireless Statistics of type 
+                     Managment."
+::= { kwnWirelessStatsEntry 17 }
+
+kwnWirelessStatsMgmtDeAuthReqRecv OBJECT-TYPE
+        SYNTAX      Integer32
+        MAX-ACCESS  read-only
+        STATUS      current
+        DESCRIPTION "This parameter represents the DeAuthentication
+                     request received in Wireless Statistics of 
+                     type Managment."
+::= { kwnWirelessStatsEntry 18 }
+
+kwnWirelessStatsMgmtAuthResultLast OBJECT-TYPE
+        SYNTAX      DisplayString
+        MAX-ACCESS  read-only
+        STATUS      current
+        DESCRIPTION "This parameter represents the Authentication
+                     result last in Wireless Statistics of 
+                     type Managment."
+::= { kwnWirelessStatsEntry 19 }
+
+kwnWirelessStatsMgmtAssocReqSent OBJECT-TYPE
+        SYNTAX      Integer32
+        MAX-ACCESS  read-only
+        STATUS      current
+        DESCRIPTION "This parameter represents the Association
+                     request sent in Wireless Statistics of type 
+                     Managment."
+::= { kwnWirelessStatsEntry 20 }
+
+kwnWirelessStatsMgmtAssocReqRecv OBJECT-TYPE
+        SYNTAX      Integer32
+        MAX-ACCESS  read-only
+        STATUS      current
+        DESCRIPTION "This parameter represents the Association
+                     request received in Wireless Statistics of 
+                     type Managment."
+::= { kwnWirelessStatsEntry 21 }
+
+kwnWirelessStatsMgmtAssocConfirm OBJECT-TYPE
+        SYNTAX      Integer32
+        MAX-ACCESS  read-only
+        STATUS      current
+        DESCRIPTION "This parameter represents the Association
+                     confirm in Wireless Statistics of type 
+                     Managment."
+::= { kwnWirelessStatsEntry 22 }
+
+kwnWirelessStatsMgmtAssocReject OBJECT-TYPE
+        SYNTAX      Integer32
+        MAX-ACCESS  read-only
+        STATUS      current
+        DESCRIPTION "This parameter represents the Association
+                     reject in Wireless Statistics of 
+                     type Managment."
+::= { kwnWirelessStatsEntry 23 }
+
+kwnWirelessStatsMgmtDeAssocReqSent OBJECT-TYPE
+        SYNTAX      Integer32
+        MAX-ACCESS  read-only
+        STATUS      current
+        DESCRIPTION "This parameter represents the DeAssociation
+                     request sent in Wireless Statistics of type 
+                     Managment."
+::= { kwnWirelessStatsEntry 24 }
+
+kwnWirelessStatsMgmtDeAssocReqRecv OBJECT-TYPE
+        SYNTAX      Integer32
+        MAX-ACCESS  read-only
+        STATUS      current
+        DESCRIPTION "This parameter represents the DeAssociation
+                     request received in Wireless Statistics of 
+                     type Managment."
+::= { kwnWirelessStatsEntry 25 }
+
+kwnWirelessStatsMgmtAssocResultLast OBJECT-TYPE
+        SYNTAX      DisplayString
+        MAX-ACCESS  read-only
+        STATUS      current
+        DESCRIPTION "This parameter represents the Association
+                     result last in Wireless Statistics of 
+                     type Managment."
+::= { kwnWirelessStatsEntry 26 }
+
+kwnWirelessStatsMPDUErrors OBJECT-TYPE
+        SYNTAX      Integer32
+        MAX-ACCESS  read-only
+        STATUS      current
+        DESCRIPTION "This parameter represents the MPDU Errors
+                     in Wireless Statistcs."
+::= { kwnWirelessStatsEntry 27 }
+
+kwnWirelessStatsPhyErrors OBJECT-TYPE
+        SYNTAX      Integer32
+        MAX-ACCESS  read-only
+        STATUS      current
+        DESCRIPTION "This parameter represents the Phy Errors
+                     in Wireless Statistcs."
+::= { kwnWirelessStatsEntry 28 }
+
+------------------------------------------------------------------------
+------------------------------------------------------------------------
+kwnEthernetStats OBJECT-IDENTITY
+        STATUS      current
+        DESCRIPTION "Ethernet Statistcs"
+::= { kwnMonitor 2 }
+
+kwnEthernetStatus OBJECT-TYPE
+        SYNTAX      DisplayString
+        MAX-ACCESS  read-only
+        STATUS      current
+        DESCRIPTION "This parameter represents the Ethernet Status."
+::= { kwnEthernetStats 1 }
+
+kwnEthernetSpeed OBJECT-TYPE
+        SYNTAX      DisplayString
+        MAX-ACCESS  read-only
+        STATUS      current
+        DESCRIPTION "This parameter represents the Ethernet Speed."
+::= { kwnEthernetStats 2 }
+
+kwnEthernetDuplex OBJECT-TYPE
+        SYNTAX      DisplayString
+        MAX-ACCESS  read-only
+        STATUS      current
+        DESCRIPTION "This parameter represents the Ethernet Duplex."
+::= { kwnEthernetStats 3 }
+
+------------------------------------------------------------------------
+------------------------------------------------------------------------
+
+kwnAssocTable OBJECT-TYPE
+        SYNTAX SEQUENCE OF KwnAssocEntry
+        MAX-ACCESS         not-accessible
+        STATUS             current
+        DESCRIPTION        "This table is used to specify
+                            Wireless Association Station"
+::= { kwnMonitor 3 }
+
+
+kwnAssocEntry OBJECT-TYPE
+        SYNTAX      KwnAssocEntry
+        MAX-ACCESS  not-accessible
+        STATUS      current
+        DESCRIPTION "This parameter represents an entry in the
+                     Associated station Table"
+        INDEX   { kwnAssocRadioIndex, kwnAssocSecIndex }
+::= { kwnAssocTable 1 }
+
+
+KwnAssocEntry ::=
+        SEQUENCE {
+                kwnAssocRadioIndex 
+                    Integer32,
+                kwnAssocSecIndex 
+                    Integer32,
+                kwnAssocMAC 
+                    DisplayString,
+                kwnAssocIP 
+                    IpAddress,
+                kwnAssocRemoteLat 
+                    DisplayString,
+                kwnAssocRemoteLong 
+                    DisplayString,
+                kwnAssocLocalLat 
+                    DisplayString,
+                kwnAssocLocalLong 
+                    DisplayString,
+                kwnAssocRxRate 
+                    Integer32,
+                kwnAssocTxRate 
+                    Integer32,
+                kwnAssocRxTput 
+                    Integer32,
+                kwnAssocTxTput 
+                    Integer32,
+                kwnAssocLocalSNRA1 
+                    Integer32,
+                kwnAssocLocalSNRA2 
+                    Integer32,
+                kwnAssocRemoteSNRA1 
+                    Integer32,
+                kwnAssocRemoteSNRA2 
+                    Integer32,
+                kwnAssocLocalPhyErr 
+                    Integer32,
+                kwnAssocRemotePhyErr 
+                    Integer32,
+                kwnAssocLocalMPDUErr 
+                    Integer32,
+                kwnAssocRemoteMPDUErr 
+                    Integer32,
+                kwnAssocLocalRetries 
+                    Integer32,
+                kwnAssocRemoteRetries 
+                    Integer32,
+                kwnAssocLinkTestDuration 
+                    Integer32,
+                kwnAssocLinkTestDirection 
+                    Integer32,
+                kwnAssocLinkTestStartStop 
+                    Integer32,
+                kwnAssocLocalNoiseFloor 
+                    Integer32,
+                kwnAssocRemoteNoiseFloor 
+                    Integer32
+        }
+
+
+kwnAssocRadioIndex OBJECT-TYPE
+        SYNTAX      Integer32 (1..2)
+        MAX-ACCESS  not-accessible
+        STATUS      current
+        DESCRIPTION "This parameter represents the index for the 
+                     wireless Assoc Table."
+::= { kwnAssocEntry 1 }
+
+kwnAssocSecIndex OBJECT-TYPE
+        SYNTAX      Integer32 (1..2)
+        MAX-ACCESS  not-accessible
+        STATUS      current
+        DESCRIPTION "This parameter represents the Secondary index 
+                     for the wireless Assoc Table."
+::= { kwnAssocEntry 2 }
+
+
+kwnAssocMAC OBJECT-TYPE
+        SYNTAX      DisplayString
+        MAX-ACCESS  read-only
+        STATUS      current
+        DESCRIPTION "This parameter represents the MAC address of 
+                     associated station for a wireless interface."
+::= { kwnAssocEntry 3 }
+
+
+kwnAssocIP OBJECT-TYPE
+        SYNTAX      IpAddress
+        MAX-ACCESS  read-only
+        STATUS      current
+        DESCRIPTION "This parameter represents the IP address of 
+                     associated station for a wireless interface."
+::= { kwnAssocEntry 4 }
+
+kwnAssocRemoteLat OBJECT-TYPE
+        SYNTAX      DisplayString
+        MAX-ACCESS  read-only
+        STATUS      current
+        DESCRIPTION "This parameter represents the Remote Latitude 
+                     of associated station for a wireless interface."
+::= { kwnAssocEntry 5 }
+
+kwnAssocRemoteLong OBJECT-TYPE
+        SYNTAX      DisplayString
+        MAX-ACCESS  read-only
+        STATUS      current
+        DESCRIPTION "This parameter represents the Remote Longitude 
+                     of associated station for a wireless interface."
+::= { kwnAssocEntry 6 }
+
+kwnAssocLocalLat OBJECT-TYPE
+        SYNTAX      DisplayString
+        MAX-ACCESS  read-only
+        STATUS      current
+        DESCRIPTION "This parameter represents the Local Latitude 
+                     of associated station for a wireless interface."
+::= { kwnAssocEntry 7 }
+
+kwnAssocLocalLong OBJECT-TYPE
+        SYNTAX      DisplayString
+        MAX-ACCESS  read-only
+        STATUS      current
+        DESCRIPTION "This parameter represents the Local Longitude 
+                     of associated station for a wireless interface."
+::= { kwnAssocEntry 8 }
+
+kwnAssocRxRate OBJECT-TYPE
+        SYNTAX      Integer32
+        MAX-ACCESS  read-only
+        STATUS      current
+        DESCRIPTION "This parameter represents the Rx Rate 
+                     of associated station for a wireless interface."
+::= { kwnAssocEntry 9 }
+
+kwnAssocTxRate OBJECT-TYPE
+        SYNTAX      Integer32
+        MAX-ACCESS  read-only
+        STATUS      current
+        DESCRIPTION "This parameter represents the Tx Rate 
+                     of associated station for a wireless interface."
+::= { kwnAssocEntry 10 }
+
+kwnAssocRxTput OBJECT-TYPE
+        SYNTAX      Integer32
+        MAX-ACCESS  read-only
+        STATUS      current
+        DESCRIPTION "This parameter represents the Rx Throughput 
+                     of associated station for a wireless interface."
+::= { kwnAssocEntry 11 }
+
+kwnAssocTxTput OBJECT-TYPE
+        SYNTAX      Integer32
+        MAX-ACCESS  read-only
+        STATUS      current
+        DESCRIPTION "This parameter represents the Tx Throughput 
+                     of associated station for a wireless interface."
+::= { kwnAssocEntry 12 }
+
+kwnAssocLocalSNRA1 OBJECT-TYPE
+        SYNTAX      Integer32
+        MAX-ACCESS  read-only
+        STATUS      current
+        DESCRIPTION "This parameter represents the Local SNR A1 
+                     of associated station for a wireless interface."
+::= { kwnAssocEntry 13 }
+
+kwnAssocLocalSNRA2 OBJECT-TYPE
+        SYNTAX      Integer32
+        MAX-ACCESS  read-only
+        STATUS      current
+        DESCRIPTION "This parameter represents the Local SNR A2 
+                     of associated station for a wireless interface."
+::= { kwnAssocEntry 14 }
+
+kwnAssocRemoteSNRA1 OBJECT-TYPE
+        SYNTAX      Integer32
+        MAX-ACCESS  read-only
+        STATUS      current
+        DESCRIPTION "This parameter represents the Remote SNR A1 
+                     of associated station for a wireless interface."
+::= { kwnAssocEntry 15 }
+
+kwnAssocRemoteSNRA2 OBJECT-TYPE
+        SYNTAX      Integer32
+        MAX-ACCESS  read-only
+        STATUS      current
+        DESCRIPTION "This parameter represents the Remote SNR A2 
+                     of associated station for a wireless interface."
+::= { kwnAssocEntry 16 }
+
+kwnAssocLocalPhyErr OBJECT-TYPE
+        SYNTAX      Integer32
+        MAX-ACCESS  read-only
+        STATUS      current
+        DESCRIPTION "This parameter represents the Local Phy Errors 
+                     of associated station for a wireless interface."
+::= { kwnAssocEntry 17 }
+
+kwnAssocRemotePhyErr OBJECT-TYPE
+        SYNTAX      Integer32
+        MAX-ACCESS  read-only
+        STATUS      current
+        DESCRIPTION "This parameter represents the Remote Phy Errors 
+                     of associated station for a wireless interface."
+::= { kwnAssocEntry 18 }
+
+kwnAssocLocalMPDUErr OBJECT-TYPE
+        SYNTAX      Integer32
+        MAX-ACCESS  read-only
+        STATUS      current
+        DESCRIPTION "This parameter represents the Local MPDU Errors 
+                     of associated station for a wireless interface."
+::= { kwnAssocEntry 19 }
+
+kwnAssocRemoteMPDUErr OBJECT-TYPE
+        SYNTAX      Integer32
+        MAX-ACCESS  read-only
+        STATUS      current
+        DESCRIPTION "This parameter represents the Remote MPDU Errors 
+                     of associated station for a wireless interface."
+::= { kwnAssocEntry 20 }
+
+kwnAssocLocalRetries OBJECT-TYPE
+        SYNTAX      Integer32
+        MAX-ACCESS  read-only
+        STATUS      current
+        DESCRIPTION "This parameter represents the Local Retries
+                     of associated station for a wireless interface."
+::= { kwnAssocEntry 21 }
+
+kwnAssocRemoteRetries OBJECT-TYPE
+        SYNTAX      Integer32
+        MAX-ACCESS  read-only
+        STATUS      current
+        DESCRIPTION "This parameter represents the Remote Retries
+                     of associated station for a wireless interface."
+::= { kwnAssocEntry 22 }
+
+kwnAssocLinkTestDuration OBJECT-TYPE
+        SYNTAX      Integer32
+        MAX-ACCESS  read-write
+        STATUS      current
+        DESCRIPTION "This parameter represents the Link test Duration."
+::= { kwnAssocEntry 23 }
+
+kwnAssocLinkTestDirection OBJECT-TYPE
+        SYNTAX      Integer32
+        MAX-ACCESS  read-write
+        STATUS      current
+        DESCRIPTION "This parameter represents the Link test Direction."
+::= { kwnAssocEntry 24 }
+
+kwnAssocLinkTestStartStop OBJECT-TYPE
+        SYNTAX      Integer32
+        MAX-ACCESS  read-write
+        STATUS      current
+        DESCRIPTION "This parameter represents the Link test status as
+                     Start or Stop."
+::= { kwnAssocEntry 25 }
+
+kwnAssocLocalNoiseFloor OBJECT-TYPE
+        SYNTAX      Integer32
+        MAX-ACCESS  read-only
+        STATUS      current
+        DESCRIPTION "This parameter represents the Local Noise Floor
+                     of associated station for a wireless interface."
+::= { kwnAssocEntry 26 }
+
+kwnAssocRemoteNoiseFloor OBJECT-TYPE
+        SYNTAX      Integer32
+        MAX-ACCESS  read-only
+        STATUS      current
+        DESCRIPTION "This parameter represents the Remote Noise Floor
+                     of associated station for a wireless interface."
+::= { kwnAssocEntry 27 }
+
+
+END
