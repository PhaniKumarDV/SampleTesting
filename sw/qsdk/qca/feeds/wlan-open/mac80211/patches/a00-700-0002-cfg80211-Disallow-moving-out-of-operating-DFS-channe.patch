--- a/net/wireless/core.h
+++ b/net/wireless/core.h
@@ -453,6 +453,8 @@ cfg80211_chandef_dfs_cac_time(struct wip
 
 void cfg80211_sched_dfs_chan_update(struct cfg80211_registered_device *rdev);
 
+bool cfg80211_beaconing_iface_active(struct wireless_dev *wdev);
+
 static inline unsigned int elapsed_jiffies_msecs(unsigned long start)
 {
 	unsigned long end = jiffies;
--- a/net/wireless/mlme.c
+++ b/net/wireless/mlme.c
@@ -757,7 +757,7 @@ static bool cfg80211_5ghz_sub_chan(struc
 		chan->center_freq < end_freq_seg1;
 }
 
-static bool cfg80211_beaconing_iface_active(struct wireless_dev *wdev)
+bool cfg80211_beaconing_iface_active(struct wireless_dev *wdev)
 {
 	bool active = false;
 
--- a/net/wireless/nl80211.c
+++ b/net/wireless/nl80211.c
@@ -6460,6 +6460,17 @@ static int nl80211_parse_random_mac(stru
 	return 0;
 }
 
+static bool cfg80211_off_channel_oper_allowed(struct wireless_dev *wdev)
+{
+	if (!cfg80211_beaconing_iface_active(wdev))
+		return true;
+
+	if (!(wdev->chandef.chan->flags & IEEE80211_CHAN_RADAR))
+		return true;
+
+	return regulatory_pre_cac_allowed(wdev->wiphy);
+}
+
 static int nl80211_trigger_scan(struct sk_buff *skb, struct genl_info *info)
 {
 	struct cfg80211_registered_device *rdev = info->user_ptr[0];
@@ -6585,6 +6596,21 @@ static int nl80211_trigger_scan(struct s
 
 	request->n_channels = i;
 
+	if (!cfg80211_off_channel_oper_allowed(wdev)) {
+		struct ieee80211_channel *chan;
+
+		if (request->n_channels != 1) {
+			err = -EBUSY;
+			goto out_free;
+		}
+
+		chan = request->channels[0];
+		if (chan->center_freq != wdev->chandef.chan->center_freq) {
+			err = -EBUSY;
+			goto out_free;
+		}
+	}
+
 	i = 0;
 	if (n_ssids) {
 		nla_for_each_nested(attr, info->attrs[NL80211_ATTR_SCAN_SSIDS], tmp) {
@@ -8899,6 +8925,7 @@ static int nl80211_remain_on_channel(str
 	struct cfg80211_registered_device *rdev = info->user_ptr[0];
 	struct wireless_dev *wdev = info->user_ptr[1];
 	struct cfg80211_chan_def chandef;
+	const struct cfg80211_chan_def *compat_chandef;
 	struct sk_buff *msg;
 	void *hdr;
 	u64 cookie;
@@ -8927,6 +8954,14 @@ static int nl80211_remain_on_channel(str
 	if (err)
 		return err;
 
+	if (!(cfg80211_off_channel_oper_allowed(wdev) ||
+	      cfg80211_chandef_identical(&wdev->chandef, &chandef))) {
+		compat_chandef = cfg80211_chandef_compatible(&wdev->chandef,
+							     &chandef);
+		if (compat_chandef != &chandef)
+			return -EBUSY;
+	}
+
 	msg = nlmsg_new(NLMSG_DEFAULT_SIZE, GFP_KERNEL);
 	if (!msg)
 		return -ENOMEM;
@@ -9101,6 +9136,9 @@ static int nl80211_tx_mgmt(struct sk_buf
 	if (!chandef.chan && params.offchan)
 		return -EINVAL;
 
+	if (params.offchan && !cfg80211_off_channel_oper_allowed(wdev))
+		return -EBUSY;
+
 	params.buf = nla_data(info->attrs[NL80211_ATTR_FRAME]);
 	params.len = nla_len(info->attrs[NL80211_ATTR_FRAME]);
 
