diff -urN wireless_tools.29_org/iwlib.c wireless_tools.29_mod/iwlib.c
--- wireless_tools.29_org/iwlib.c	2018-09-05 18:14:12.398891449 +0530
+++ wireless_tools.29_mod/iwlib.c	2018-09-06 15:26:56.220709124 +0530
@@ -1417,8 +1417,8 @@
       /* Deal with quality : always a relative value */
       if(!(qual->updated & IW_QUAL_QUAL_INVALID))
 	{
-	  len = snprintf(buffer, buflen, "Quality%c%d/%d  ",
-			 qual->updated & IW_QUAL_QUAL_UPDATED ? '=' : ':',
+	  len = snprintf(buffer, buflen, "Quality%c%d/%d",
+			 qual->updated & IW_QUAL_QUAL_UPDATED ? '=' : '=',
 			 qual->qual, range->max_qual.qual);
 	  buffer += len;
 	  buflen -= len;
@@ -1432,8 +1432,8 @@
 	  if(!(qual->updated & IW_QUAL_LEVEL_INVALID))
 	    {
 	      double	rcpilevel = (qual->level / 2.0) - 110.0;
-	      len = snprintf(buffer, buflen, "Signal level%c%g dBm  ",
-			     qual->updated & IW_QUAL_LEVEL_UPDATED ? '=' : ':',
+	      len = snprintf(buffer, buflen, "Signal%c%g",
+			     qual->updated & IW_QUAL_LEVEL_UPDATED ? '=' : '=',
 			     rcpilevel);
 	      buffer += len;
 	      buflen -= len;
@@ -1443,8 +1443,8 @@
 	  if(!(qual->updated & IW_QUAL_NOISE_INVALID))
 	    {
 	      double	rcpinoise = (qual->noise / 2.0) - 110.0;
-	      len = snprintf(buffer, buflen, "Noise level%c%g dBm",
-			     qual->updated & IW_QUAL_NOISE_UPDATED ? '=' : ':',
+	      len = snprintf(buffer, buflen, "Noise%c%g",
+			     qual->updated & IW_QUAL_NOISE_UPDATED ? '=' : '=',
 			     rcpinoise);
 	    }
 	}
@@ -1461,8 +1461,8 @@
 		  /* Implement a range for dBm [-192; 63] */
 		  if(qual->level >= 64)
 		    dblevel -= 0x100;
-		  len = snprintf(buffer, buflen, "Signal level%c%d dBm  ",
-				 qual->updated & IW_QUAL_LEVEL_UPDATED ? '=' : ':',
+		  len = snprintf(buffer, buflen, "Signal%c%d",
+				 qual->updated & IW_QUAL_LEVEL_UPDATED ? '=' : '=',
 				 dblevel);
 		  buffer += len;
 		  buflen -= len;
@@ -1475,8 +1475,8 @@
 		  /* Implement a range for dBm [-192; 63] */
 		  if(qual->noise >= 64)
 		    dbnoise -= 0x100;
-		  len = snprintf(buffer, buflen, "Noise level%c%d dBm",
-				 qual->updated & IW_QUAL_NOISE_UPDATED ? '=' : ':',
+		  len = snprintf(buffer, buflen, "Noise%c%d",
+				 qual->updated & IW_QUAL_NOISE_UPDATED ? '=' : '=',
 				 dbnoise);
 		}
 	    }
@@ -1485,8 +1485,8 @@
 	      /* Deal with signal level as relative value (0 -> max) */
 	      if(!(qual->updated & IW_QUAL_LEVEL_INVALID))
 		{
-		  len = snprintf(buffer, buflen, "Signal level%c%d/%d  ",
-				 qual->updated & IW_QUAL_LEVEL_UPDATED ? '=' : ':',
+		  len = snprintf(buffer, buflen, "Signal%c%d/%d",
+				 qual->updated & IW_QUAL_LEVEL_UPDATED ? '=' : '=',
 				 qual->level, range->max_qual.level);
 		  buffer += len;
 		  buflen -= len;
@@ -1495,8 +1495,8 @@
 	      /* Deal with noise level as relative value (0 -> max) */
 	      if(!(qual->updated & IW_QUAL_NOISE_INVALID))
 		{
-		  len = snprintf(buffer, buflen, "Noise level%c%d/%d",
-				 qual->updated & IW_QUAL_NOISE_UPDATED ? '=' : ':',
+		  len = snprintf(buffer, buflen, "Noise%c%d/%d",
+				 qual->updated & IW_QUAL_NOISE_UPDATED ? '=' : '=',
 				 qual->noise, range->max_qual.noise);
 		}
 	    }
@@ -1506,7 +1506,7 @@
     {
       /* We can't read the range, so we don't know... */
       snprintf(buffer, buflen,
-	       "Quality:%d  Signal level:%d  Noise level:%d",
+	       "Quality=%dSignal=%dNoise=%d",
 	       qual->qual, qual->level, qual->noise);
     }
 }
diff -urN wireless_tools.29_org/iwlist.c wireless_tools.29_mod/iwlist.c
--- wireless_tools.29_org/iwlist.c	2018-09-05 18:13:54.251115918 +0530
+++ wireless_tools.29_mod/iwlist.c	2018-11-23 12:37:27.858897786 +0530
@@ -1576,7 +1576,8 @@
     }
   return(0);
 }
-
+#endif	/* WE_ESSENTIAL */
+#ifdef WE_ESSENTIAL
 /************************ ACCESS POINT LIST ************************/
 /*
  * Note : now that we have scanning support, this is depracted and
@@ -1596,10 +1597,11 @@
 {
   struct iwreq		wrq;
   char		buffer[(sizeof(struct iw_quality) +
-			sizeof(struct sockaddr)) * IW_MAX_AP];
+			sizeof(struct sockaddr) + sizeof(struct iw_ssid)) * IW_MAX_AP];
   char		temp[128];
   struct sockaddr *	hwa;
   struct iw_quality *	qual;
+  struct iw_ssid *	ssid;
   iwrange	range;
   int		has_range = 0;
   int		has_qual = 0;
@@ -1626,6 +1628,7 @@
   /* The two lists */
   hwa = (struct sockaddr *) buffer;
   qual = (struct iw_quality *) (buffer + (sizeof(struct sockaddr) * n));
+  ssid = (struct iw_ssid *) (buffer + (sizeof(struct sockaddr) * n) + (sizeof(struct iw_quality) * n));
 
   /* Check if we have valid mac address type */
   if(iw_check_mac_addr_type(skfd, ifname) < 0)
@@ -1639,18 +1642,23 @@
     has_range = 1;
 
   /* Display it */
+#if 0
   if(n == 0)
     printf("%-8.16s  No Peers/Access-Point in range\n", ifname);
   else
     printf("%-8.16s  Peers/Access-Points in range:\n", ifname);
+#endif
   for(i = 0; i < n; i++)
     {
       if(has_qual)
 	{
 	  /* Print stats for this address */
-	  printf("    %s : ", iw_saether_ntop(&hwa[i], temp));
+	  printf("%s@", iw_saether_ntop(&hwa[i], temp));
+	  printf("%s@", ssid[i].essid);
+	  printf("%d@", ssid[i].chan);
+	  printf("%d@", ssid[i].freq);
 	  iw_print_stats(temp, sizeof(buffer), &qual[i], &range, has_range);
-	  printf("%s\n", temp);
+	  printf("%s,", temp);
 	}
       else
 	/* Only print the address */
@@ -1659,7 +1667,8 @@
   printf("\n");
   return(0);
 }
-
+#endif	/* WE_ESSENTIAL */
+#ifndef WE_ESSENTIAL
 /******************** WIRELESS EVENT CAPABILITY ********************/
 
 static const char *	event_capa_req[] =
@@ -2061,7 +2070,11 @@
   { "txpower",		print_txpower_info,	0, NULL },
 #ifndef WE_ESSENTIAL
   { "retry",		print_retry_info,	0, NULL },
+#endif
+#ifdef WE_ESSENTIAL
   { "ap",		print_ap_info,		0, NULL },
+#endif
+#ifndef WE_ESSENTIAL
   { "accesspoints",	print_ap_info,		0, NULL },
   { "peers",		print_ap_info,		0, NULL },
   { "event",		print_event_capa_info,	0, NULL },
diff -urN wireless_tools.29_org/wireless.21.h wireless_tools.29_mod/wireless.21.h
--- wireless_tools.29_org/wireless.21.h	2007-06-30 04:34:24.000000000 +0530
+++ wireless_tools.29_mod/wireless.21.h	2018-11-23 12:30:57.973761652 +0530
@@ -702,6 +702,13 @@
 	__u8		flags;		/* Flags (fixed/auto) */
 };
 
+struct iw_ssid
+{
+        __u8        essid[IW_ESSID_MAX_SIZE];
+        __u8        chan;
+        __u16       freq;
+};
+
 /*
  *	Quality of the link
  */
